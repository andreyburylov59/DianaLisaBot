"""
üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite –¥–ª—è –±–æ—Ç–∞ DianaLisa
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –∑–∞–¥–∞—á–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
"""

import sqlite3
import logging
from enhanced_logger import get_logger
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Any
from config import DATABASE_PATH

logger = logging.getLogger(__name__)
enhanced_logger = get_logger("database")

class Database:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite"""
    
    def __init__(self, db_path: str = DATABASE_PATH):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS users (
                        user_id INTEGER PRIMARY KEY,
                        username TEXT,
                        first_name TEXT,
                        last_name TEXT,
                        email TEXT UNIQUE,
                        phone TEXT UNIQUE,
                        timezone TEXT DEFAULT 'Europe/Moscow',
                        current_day INTEGER DEFAULT 1,
                        registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        is_premium BOOLEAN DEFAULT FALSE,
                        premium_expires TIMESTAMP,
                        referral_code TEXT UNIQUE,
                        referred_by INTEGER,
                        total_referrals INTEGER DEFAULT 0,
                        total_purchases REAL DEFAULT 0.0,
                        training_completed BOOLEAN DEFAULT FALSE,
                        collected_tips TEXT DEFAULT '[]',
                        FOREIGN KEY (referred_by) REFERENCES users(user_id)
                    )
                ''')
                
                # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS scheduled_jobs (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER,
                        job_type TEXT,
                        scheduled_time TIMESTAMP,
                        is_active BOOLEAN DEFAULT TRUE,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        FOREIGN KEY (user_id) REFERENCES users(user_id)
                    )
                ''')
                
                # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS analytics (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER,
                        event_type TEXT,
                        event_data TEXT,
                        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        FOREIGN KEY (user_id) REFERENCES users(user_id)
                    )
                ''')
                
                # –¢–∞–±–ª–∏—Ü–∞ –æ—Ü–µ–Ω–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS training_feedback (
                        feedback_id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER,
                        day INTEGER,
                        difficulty_rating INTEGER,
                        clarity_rating INTEGER,
                        comments TEXT,
                        timestamp TEXT,
                        FOREIGN KEY (user_id) REFERENCES users (user_id)
                    )
                ''')
                
                # –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS payments (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER,
                        amount REAL,
                        currency TEXT,
                        payment_type TEXT,
                        status TEXT,
                        transaction_id TEXT UNIQUE,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        FOREIGN KEY (user_id) REFERENCES users(user_id)
                    )
                ''')
                
                # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–∑—ã–≤–æ–≤
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS reviews (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER,
                        rating INTEGER,
                        review_text TEXT,
                        is_approved BOOLEAN DEFAULT FALSE,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        FOREIGN KEY (user_id) REFERENCES users(user_id)
                    )
                ''')
                
                conn.commit()
                logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    def add_user(self, user_id: int, username: str = None, first_name: str = None,
                last_name: str = None, email: str = None, phone: str = None, timezone: str = 'Europe/Moscow',
                referral_code: str = None, referred_by: int = None) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        start_time = datetime.now()
        
        try:
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: username={username}, first_name={first_name}, email={email}, phone={phone}, timezone={timezone}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            enhanced_logger.log_database_operation(
                'INSERT',
                'users',
                {
                    'user_id': user_id,
                    'username': username,
                    'first_name': first_name,
                    'email': email,
                    'phone': phone,
                    'timezone': timezone
                }
            )

            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
                if not referral_code:
                    referral_code = f"REF{user_id}{datetime.now().strftime('%Y%m%d')}"

                cursor.execute('''
                    INSERT OR REPLACE INTO users
                    (user_id, username, first_name, last_name, email, phone, timezone, referral_code, referred_by)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (user_id, username, first_name, last_name, email, phone, timezone, referral_code, referred_by))

                conn.commit()
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
                cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
                result = cursor.fetchone()
                if result:
                    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                else:
                    logger.error(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")

                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                duration = (datetime.now() - start_time).total_seconds()
                enhanced_logger.log_performance('add_user', duration, {'user_id': user_id})
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                enhanced_logger.log_user_action(user_id, 'user_registered', {
                    'username': username,
                    'first_name': first_name,
                    'email': email,
                    'timezone': timezone
                })

                return True

        except Exception as e:
            duration = (datetime.now() - start_time).total_seconds()
            enhanced_logger.log_error(e, {
                'operation': 'add_user',
                'user_id': user_id,
                'duration': duration
            })
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    def get_user(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
                row = cursor.fetchone()
                
                if row:
                    columns = [description[0] for description in cursor.description]
                    user_data = dict(zip(columns, row))
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±—É–ª–µ–≤—ã–µ –ø–æ–ª—è –∏–∑ SQLite (1/0) –≤ Python (True/False)
                    boolean_fields = ['training_completed']
                    for field in boolean_fields:
                        if field in user_data:
                            user_data[field] = bool(user_data[field])
                    
                    return user_data
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None
    
    def update_user(self, user_id: int, **kwargs) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                set_clause = ', '.join([f"{key} = ?" for key in kwargs.keys()])
                values = list(kwargs.values()) + [user_id]
                
                cursor.execute(f'UPDATE users SET {set_clause} WHERE user_id = ?', values)
                conn.commit()
                
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω")
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    def update_user_day(self, user_id: int, day: int) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.update_user(user_id, current_day=day, last_activity=datetime.now())
    
    def mark_training_completed(self, user_id: int) -> bool:
        """–û—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        return self.update_user(user_id, training_completed=True)
    
    
    
    def reset_daily_marks(self, user_id: int) -> bool:
        """–°–±—Ä–æ—Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç–º–µ—Ç–æ–∫"""
        return self.update_user(user_id, 
                              training_completed=False)
    
    def add_scheduled_job(self, user_id: int, job_type: str, scheduled_time: datetime) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO scheduled_jobs (user_id, job_type, scheduled_time)
                    VALUES (?, ?, ?)
                ''', (user_id, job_type, scheduled_time))
                conn.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            return False
    
    def get_scheduled_jobs(self, user_id: int = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                if user_id:
                    cursor.execute('SELECT * FROM scheduled_jobs WHERE user_id = ? AND is_active = TRUE', (user_id,))
                else:
                    cursor.execute('SELECT * FROM scheduled_jobs WHERE is_active = TRUE')
                
                rows = cursor.fetchall()
                columns = [description[0] for description in cursor.description]
                return [dict(zip(columns, row)) for row in rows]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")
            return []
    
    def deactivate_job(self, job_id: int) -> bool:
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∑–∞–¥–∞—á–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('UPDATE scheduled_jobs SET is_active = FALSE WHERE id = ?', (job_id,))
                conn.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            return False
    
    def add_analytics_event(self, user_id: int, event_type: str, event_data: str = None) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO analytics (user_id, event_type, event_data)
                    VALUES (?, ?, ?)
                ''', (user_id, event_type, event_data))
                conn.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
            return False
    
    def get_user_stats(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user = self.get_user(user_id)
                if not user:
                    return {}
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
                cursor.execute('''
                    SELECT event_type, COUNT(*) as count 
                    FROM analytics 
                    WHERE user_id = ? 
                    GROUP BY event_type
                ''', (user_id,))
                events = dict(cursor.fetchall())
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
                cursor.execute('''
                    SELECT COUNT(*) as payments_count, SUM(amount) as total_amount
                    FROM payments 
                    WHERE user_id = ? AND status = 'completed'
                ''', (user_id,))
                payment_stats = cursor.fetchone()
                
                return {
                    'user': user,
                    'events': events,
                    'payments_count': payment_stats[0] if payment_stats[0] else 0,
                    'total_spent': payment_stats[1] if payment_stats[1] else 0.0
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    def get_all_users(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT * FROM users ORDER BY registration_date DESC')
                rows = cursor.fetchall()
                columns = [description[0] for description in cursor.description]
                return [dict(zip(columns, row)) for row in rows]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    def get_users_count(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT COUNT(*) FROM users')
                return cursor.fetchone()[0]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return 0
    
    def add_payment(self, user_id: int, amount: float, currency: str, 
                   payment_type: str, status: str, transaction_id: str) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO payments (user_id, amount, currency, payment_type, status, transaction_id)
                    VALUES (?, ?, ?, ?, ?, ?)
                ''', (user_id, amount, currency, payment_type, status, transaction_id))
                conn.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return False
    
    def add_review(self, user_id: int, rating: int, review_text: str) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO reviews (user_id, rating, review_text)
                    VALUES (?, ?, ?)
                ''', (user_id, rating, review_text))
                conn.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞: {e}")
            return False
    
    def get_reviews(self, approved_only: bool = True) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                if approved_only:
                    cursor.execute('''
                        SELECT r.*, u.first_name, u.username 
                        FROM reviews r 
                        JOIN users u ON r.user_id = u.user_id 
                        WHERE r.is_approved = TRUE 
                        ORDER BY r.created_at DESC
                    ''')
                else:
                    cursor.execute('''
                        SELECT r.*, u.first_name, u.username 
                        FROM reviews r 
                        JOIN users u ON r.user_id = u.user_id 
                        ORDER BY r.created_at DESC
                    ''')
                
                rows = cursor.fetchall()
                columns = [description[0] for description in cursor.description]
                return [dict(zip(columns, row)) for row in rows]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: {e}")
            return []
    
    def add_training_feedback(self, user_id: int, day: int, difficulty_rating: int, 
                            clarity_rating: int, comments: str = None) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO training_feedback 
                    (user_id, day, difficulty_rating, clarity_rating, comments, timestamp)
                    VALUES (?, ?, ?, ?, ?, ?)
                ''', (user_id, day, difficulty_rating, clarity_rating, comments, 
                     datetime.now().isoformat()))
                conn.commit()
                logger.info(f"–û—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –¥–µ–Ω—å {day}")
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {e}")
            return False
    
    def get_all_training_feedback(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ü–µ–Ω–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT tf.*, u.first_name, u.username 
                    FROM training_feedback tf 
                    JOIN users u ON tf.user_id = u.user_id 
                    ORDER BY tf.timestamp DESC
                ''')
                rows = cursor.fetchall()
                
                feedback = []
                for row in rows:
                    feedback.append({
                        'user_id': row[0],
                        'day': row[1],
                        'difficulty_rating': row[2],
                        'clarity_rating': row[3],
                        'comments': row[4],
                        'timestamp': row[5],
                        'first_name': row[6],
                        'username': row[7]
                    })
                return feedback
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ü–µ–Ω–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {e}")
            return []
    
    def get_user_course_summary(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∫—É—Ä—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user = self.get_user(user_id)
            if not user:
                return {}
            
            feedback = self.get_training_feedback(user_id)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_days = user.get('current_day', 0)
            completed_trainings = sum(1 for f in feedback if f['day'] <= total_days)
            
            # –°—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
            avg_difficulty = sum(f['difficulty_rating'] for f in feedback) / len(feedback) if feedback else 0
            avg_clarity = sum(f['clarity_rating'] for f in feedback) / len(feedback) if feedback else 0
            
            return {
                'user_name': user.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'),
                'current_day': total_days,
                'completed_trainings': completed_trainings,
                'avg_difficulty': round(avg_difficulty, 1),
                'avg_clarity': round(avg_clarity, 1),
                'feedback_count': len(feedback),
                'registration_date': user.get('registration_date', ''),
                'feedback': feedback
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –∫—É—Ä—Å–∞: {e}")
            return {}
    
    def add_tip_to_collection(self, user_id: int, tip_type: str, tip_text: str) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            import json
            
            user = self.get_user(user_id)
            if not user:
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ–≤–µ—Ç—ã
            collected_tips = json.loads(user.get('collected_tips', '[]'))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —Å–æ–≤–µ—Ç–∞
            tip_exists = any(tip['type'] == tip_type for tip in collected_tips)
            if tip_exists:
                return True  # –°–æ–≤–µ—Ç —É–∂–µ –µ—Å—Ç—å
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–æ–≤–µ—Ç
            new_tip = {
                'type': tip_type,
                'text': tip_text,
                'timestamp': datetime.now().isoformat()
            }
            collected_tips.append(new_tip)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
            self.update_user(user_id, collected_tips=json.dumps(collected_tips, ensure_ascii=False))
            
            logger.info(f"–°–æ–≤–µ—Ç {tip_type} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–≤–µ—Ç–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é: {e}")
            return False
    
    def get_collected_tips(self, user_id: int) -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            import json
            
            user = self.get_user(user_id)
            if not user:
                return []
            
            collected_tips = json.loads(user.get('collected_tips', '[]'))
            return collected_tips
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤: {e}")
            return []
    
    def clear_collected_tips(self, user_id: int) -> bool:
        """–û—á–∏—Å—Ç–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            self.update_user(user_id, collected_tips='[]')
            logger.info(f"–°–æ–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–≤–µ—Ç–æ–≤: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()
