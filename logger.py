"""
üìù –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–æ—Ç–∞ DianaLisa
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, —Ä–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
"""

import logging
import logging.handlers
import os
import sys
from datetime import datetime
from pathlib import Path

class LoggerSetup:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.log_dir = Path("logs")
        self.log_dir.mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.log_level = logging.INFO
        self.max_file_size = 10 * 1024 * 1024  # 10 MB
        self.backup_count = 5
        self.log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        self.date_format = '%Y-%m-%d %H:%M:%S'
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ httpx (HTTP –∑–∞–ø—Ä–æ—Å—ã)
            logging.getLogger("httpx").setLevel(logging.CRITICAL)
            logging.getLogger("httpx").disabled = True
            
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
            logger = logging.getLogger()
            logger.setLevel(self.log_level)
            
            # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            logger.handlers.clear()
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
            formatter = logging.Formatter(
                self.log_format,
                datefmt=self.date_format
            )
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
            console_handler = logging.StreamHandler(sys.stdout)
            console_handler.setLevel(logging.INFO)
            console_handler.setFormatter(formatter)
            logger.addHandler(console_handler)
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞ –æ–±—â–∏—Ö –ª–æ–≥–æ–≤
            general_log_file = self.log_dir / "dianalisa_bot.log"
            general_handler = logging.handlers.RotatingFileHandler(
                general_log_file,
                maxBytes=self.max_file_size,
                backupCount=self.backup_count,
                encoding='utf-8'
            )
            general_handler.setLevel(logging.DEBUG)
            general_handler.setFormatter(formatter)
            logger.addHandler(general_handler)
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—à–∏–±–æ–∫
            error_log_file = self.log_dir / "errors.log"
            error_handler = logging.handlers.RotatingFileHandler(
                error_log_file,
                maxBytes=self.max_file_size,
                backupCount=self.backup_count,
                encoding='utf-8'
            )
            error_handler.setLevel(logging.ERROR)
            error_handler.setFormatter(formatter)
            logger.addHandler(error_handler)
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
            user_log_file = self.log_dir / "user_actions.log"
            user_handler = logging.handlers.RotatingFileHandler(
                user_log_file,
                maxBytes=self.max_file_size,
                backupCount=self.backup_count,
                encoding='utf-8'
            )
            user_handler.setLevel(logging.INFO)
            user_handler.setFormatter(formatter)
            logger.addHandler(user_handler)
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
            payment_log_file = self.log_dir / "payments.log"
            payment_handler = logging.handlers.RotatingFileHandler(
                payment_log_file,
                maxBytes=self.max_file_size,
                backupCount=self.backup_count,
                encoding='utf-8'
            )
            payment_handler.setLevel(logging.INFO)
            payment_handler.setFormatter(formatter)
            logger.addHandler(payment_handler)
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
            admin_log_file = self.log_dir / "admin_actions.log"
            admin_handler = logging.handlers.RotatingFileHandler(
                admin_log_file,
                maxBytes=self.max_file_size,
                backupCount=self.backup_count,
                encoding='utf-8'
            )
            admin_handler.setLevel(logging.INFO)
            admin_handler.setFormatter(formatter)
            logger.addHandler(admin_handler)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
            self.setup_module_loggers()
            
            logging.info("–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            sys.exit(1)
    
    def setup_module_loggers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
        try:
            # –õ–æ–≥–≥–µ—Ä –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_logger = logging.getLogger('database')
            db_logger.setLevel(logging.DEBUG)
            
            # –õ–æ–≥–≥–µ—Ä –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
            payment_logger = logging.getLogger('payment')
            payment_logger.setLevel(logging.INFO)
            
            # –õ–æ–≥–≥–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
            admin_logger = logging.getLogger('admin')
            admin_logger.setLevel(logging.INFO)
            
            # –õ–æ–≥–≥–µ—Ä –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
            training_logger = logging.getLogger('training')
            training_logger.setLevel(logging.INFO)
            
            # –õ–æ–≥–≥–µ—Ä –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            scheduler_logger = logging.getLogger('scheduler')
            scheduler_logger.setLevel(logging.INFO)
            
            # –õ–æ–≥–≥–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            registration_logger = logging.getLogger('registration')
            registration_logger.setLevel(logging.INFO)
            
            # –õ–æ–≥–≥–µ—Ä –¥–ª—è callback-–æ–≤
            callback_logger = logging.getLogger('callbacks')
            callback_logger.setLevel(logging.INFO)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—å–Ω—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤: {e}")
    
    def get_logger(self, name: str) -> logging.Logger:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏"""
        return logging.getLogger(name)
    
    def log_user_action(self, user_id: int, action: str, details: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            logger = logging.getLogger('user_actions')
            message = f"User {user_id}: {action}"
            if details:
                message += f" - {details}"
            logger.info(message)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    def log_payment(self, user_id: int, amount: float, currency: str, status: str, transaction_id: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π"""
        try:
            logger = logging.getLogger('payments')
            message = f"Payment - User: {user_id}, Amount: {amount} {currency}, Status: {status}, Transaction: {transaction_id}"
            logger.info(message)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
    
    def log_admin_action(self, admin_id: int, action: str, target: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        try:
            logger = logging.getLogger('admin_actions')
            message = f"Admin {admin_id}: {action}"
            if target:
                message += f" - Target: {target}"
            logger.info(message)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: {e}")
    
    def log_error(self, error: Exception, context: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
        try:
            logger = logging.getLogger('errors')
            message = f"Error: {str(error)}"
            if context:
                message += f" - Context: {context}"
            logger.error(message, exc_info=True)
        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    def log_performance(self, operation: str, duration: float, details: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            logger = logging.getLogger('performance')
            message = f"Performance - {operation}: {duration:.3f}s"
            if details:
                message += f" - {details}"
            logger.info(message)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
    
    def cleanup_old_logs(self, days: int = 30):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤"""
        try:
            import time
            current_time = time.time()
            cutoff_time = current_time - (days * 24 * 60 * 60)
            
            for log_file in self.log_dir.glob("*.log*"):
                if log_file.stat().st_mtime < cutoff_time:
                    log_file.unlink()
                    logging.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ª–æ–≥ —Ñ–∞–π–ª: {log_file}")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤: {e}")
    
    def get_log_stats(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–æ–≤"""
        try:
            stats = {}
            
            for log_file in self.log_dir.glob("*.log"):
                if log_file.name.endswith('.log'):
                    stats[log_file.name] = {
                        'size': log_file.stat().st_size,
                        'modified': datetime.fromtimestamp(log_file.stat().st_mtime),
                        'lines': self.count_lines(log_file)
                    }
            
            return stats
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–æ–≤: {e}")
            return {}
    
    def count_lines(self, file_path: Path) -> int:
        """–ü–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return sum(1 for _ in f)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ {file_path}: {e}")
            return 0
    
    def set_log_level(self, level: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            level_map = {
                'DEBUG': logging.DEBUG,
                'INFO': logging.INFO,
                'WARNING': logging.WARNING,
                'ERROR': logging.ERROR,
                'CRITICAL': logging.CRITICAL
            }
            
            if level.upper() in level_map:
                self.log_level = level_map[level.upper()]
                logging.getLogger().setLevel(self.log_level)
                logging.info(f"–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {level.upper()}")
            else:
                logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {level}")
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger_setup = LoggerSetup()

def setup_logging():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger_setup.setup_logging()

def get_logger(name: str) -> logging.Logger:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏"""
    return logger_setup.get_logger(name)

def log_user_action(user_id: int, action: str, details: str = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger_setup.log_user_action(user_id, action, details)

def log_payment(user_id: int, amount: float, currency: str, status: str, transaction_id: str):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π"""
    logger_setup.log_payment(user_id, amount, currency, status, transaction_id)

def log_admin_action(admin_id: int, action: str, target: str = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    logger_setup.log_admin_action(admin_id, action, target)

def log_error(error: Exception, context: str = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
    logger_setup.log_error(error, context)

def log_performance(operation: str, duration: float, details: str = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    logger_setup.log_performance(operation, duration, details)
