"""
üèãÔ∏è‚Äç‚ôÄÔ∏è –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –±–æ—Ç–∞ DianaLisa
–°–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è 3-–¥–Ω–µ–≤–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏
"""

import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from config import MESSAGES, IMAGES, BUTTONS
from keyboards import keyboards
from database import db
from utils import get_user_timezone

logger = logging.getLogger(__name__)

class TrainingSystem:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏"""
    
    def __init__(self):
        self.training_content = {
            1: self.get_day1_content(),
            2: self.get_day2_content(),
            3: self.get_day3_content()
        }
    
    def get_day1_content(self) -> dict:
        """–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –¥–Ω—è 1"""
        return {
            'title': 'üèãÔ∏è‚Äç‚ôÄÔ∏è –î–ï–ù–¨ 1: –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤—Å–µ–≥–æ —Ç–µ–ª–∞',
            'description': '–ù–∞—á–∏–Ω–∞–µ–º —Å –æ—Å–Ω–æ–≤! –°–µ–≥–æ–¥–Ω—è –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º —Ç–µ–ª–æ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º.',
            'image': 'DianaLisa2.jpg',
            'content': MESSAGES['training_day1'],
            'exercises': [
                {
                    'name': 'üî• –†–∞–∑–º–∏–Ω–∫–∞ (5 –º–∏–Ω—É—Ç)',
                    'description': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–ª–∞ –∫ –Ω–∞–≥—Ä—É–∑–∫–µ',
                    'exercises': [
                        '–ö—Ä—É–≥–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ä—É–∫–∞–º–∏ - 30 —Å–µ–∫',
                        '–ù–∞–∫–ª–æ–Ω—ã –≥–æ–ª–æ–≤—ã - 30 —Å–µ–∫',
                        '–í—Ä–∞—â–µ–Ω–∏—è –ø–ª–µ—á–∞–º–∏ - 30 —Å–µ–∫',
                        '–õ–µ–≥–∫–∏–µ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è - 30 —Å–µ–∫',
                        '–ú–∞—Ö–∏ –Ω–æ–≥–∞–º–∏ - 30 —Å–µ–∫'
                    ]
                },
                {
                    'name': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (15 –º–∏–Ω—É—Ç)',
                    'description': '–ë–∞–∑–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –º—ã—à—Ü',
                    'exercises': [
                        '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10 —Ä–∞–∑',
                        '–û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –∫–æ–ª–µ–Ω: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 8 —Ä–∞–∑',
                        '–ü–ª–∞–Ω–∫–∞: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 30 —Å–µ–∫—É–Ω–¥',
                        '–í—ã–ø–∞–¥—ã: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 8 —Ä–∞–∑ –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ–≥—É',
                        '–ü–æ–¥—ä–µ–º—ã –Ω–∞ –Ω–æ—Å–∫–∏: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 15 —Ä–∞–∑'
                    ]
                },
                {
                    'name': 'üßò‚Äç‚ôÄÔ∏è –ó–∞–º–∏–Ω–∫–∞ (5 –º–∏–Ω—É—Ç)',
                    'description': '–†–∞—Å—Ç—è–∂–∫–∞ –∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ',
                    'exercises': [
                        '–†–∞—Å—Ç—è–∂–∫–∞ –Ω–æ–≥ - 1 –º–∏–Ω—É—Ç–∞',
                        '–†–∞—Å—Ç—è–∂–∫–∞ —Å–ø–∏–Ω—ã - 1 –º–∏–Ω—É—Ç–∞',
                        '–†–∞—Å—Ç—è–∂–∫–∞ —Ä—É–∫ - 1 –º–∏–Ω—É—Ç–∞',
                        '–ì–ª—É–±–æ–∫–æ–µ –¥—ã—Ö–∞–Ω–∏–µ - 2 –º–∏–Ω—É—Ç—ã'
                    ]
                }
            ],
            'tips': [
                'üí° –ù–µ —Ç–æ—Ä–æ–ø–∏—Å—å! –ö–∞—á–µ—Å—Ç–≤–æ –≤–∞–∂–Ω–µ–µ —Å–∫–æ—Ä–æ—Å—Ç–∏',
                'üíß –ü–µ–π –≤–æ–¥—É –≤–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
                'ü´Å –î—ã—à–∏ —Ä–æ–≤–Ω–æ –∏ –≥–ª—É–±–æ–∫–æ',
                'üéØ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
            ],
            'motivation': 'üåü –¢—ã –¥–µ–ª–∞–µ—à—å –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è!'
        }
    
    def get_day2_content(self) -> dict:
        """–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –¥–Ω—è 2"""
        return {
            'title': 'üèãÔ∏è‚Äç‚ôÄÔ∏è –î–ï–ù–¨ 2: –°–ò–õ–û–í–ê–Ø –¢–†–ï–ù–ò–†–û–í–ö–ê',
            'description': '–£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å! –°–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Å–∏–ª–æ–π –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å—é.',
            'image': 'DianaLisa3.jpg',
            'content': MESSAGES['training_day2'],
            'exercises': [
                {
                    'name': 'üî• –†–∞–∑–º–∏–Ω–∫–∞ (5 –º–∏–Ω—É—Ç)',
                    'description': '–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –Ω–∞–≥—Ä—É–∑–∫–µ',
                    'exercises': [
                        '–ë–µ–≥ –Ω–∞ –º–µ—Å—Ç–µ - 1 –º–∏–Ω—É—Ç–∞',
                        '–ú–∞—Ö–∏ —Ä—É–∫–∞–º–∏ - 1 –º–∏–Ω—É—Ç–∞',
                        '–ù–∞–∫–ª–æ–Ω—ã –≤ —Å—Ç–æ—Ä–æ–Ω—ã - 1 –º–∏–Ω—É—Ç–∞',
                        '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è –±–µ–∑ –≤–µ—Å–∞ - 1 –º–∏–Ω—É—Ç–∞',
                        '–ü—Ä—ã–∂–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ - 1 –º–∏–Ω—É—Ç–∞'
                    ]
                },
                {
                    'name': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (20 –º–∏–Ω—É—Ç)',
                    'description': '–°–∏–ª–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –º—ã—à—Ü',
                    'exercises': [
                        '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å –ø—Ä—ã–∂–∫–æ–º: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 12 —Ä–∞–∑',
                        '–û—Ç–∂–∏–º–∞–Ω–∏—è: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10 —Ä–∞–∑',
                        '–ü–ª–∞–Ω–∫–∞ —Å –ø–æ–¥—ä–µ–º–æ–º –Ω–æ–≥: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 45 —Å–µ–∫—É–Ω–¥',
                        '–ë—É—Ä–ø–∏: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 8 —Ä–∞–∑',
                        '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è –Ω–∞ –æ–¥–Ω–æ–π –Ω–æ–≥–µ: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 6 —Ä–∞–∑',
                        '–û—Ç–∂–∏–º–∞–Ω–∏—è —Å —à–∏—Ä–æ–∫–æ–π –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 8 —Ä–∞–∑'
                    ]
                },
                {
                    'name': 'üßò‚Äç‚ôÄÔ∏è –ó–∞–º–∏–Ω–∫–∞ (5 –º–∏–Ω—É—Ç)',
                    'description': '–ü–æ–ª–Ω–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞ –≤—Å–µ–≥–æ —Ç–µ–ª–∞',
                    'exercises': [
                        '–†–∞—Å—Ç—è–∂–∫–∞ –≤—Å–µ–≥–æ —Ç–µ–ª–∞ - 3 –º–∏–Ω—É—Ç—ã',
                        '–ú–µ–¥–∏—Ç–∞—Ü–∏—è - 2 –º–∏–Ω—É—Ç—ã'
                    ]
                }
            ],
            'tips': [
                'üí™ –°–ª—É—à–∞–π —Å–≤–æ–µ —Ç–µ–ª–æ - –Ω–µ –ø–µ—Ä–µ—É—Å–µ—Ä–¥—Å—Ç–≤—É–π',
                '‚è±Ô∏è –î–µ–ª–∞–π –ø–µ—Ä–µ—Ä—ã–≤—ã –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥–∞–º–∏',
                'üéµ –í–∫–ª—é—á–∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â—É—é –º—É–∑—ã–∫—É',
                'üì± –ó–∞—Å–µ–∫–∞–π –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π'
            ],
            'motivation': 'üî• –¢—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —Å–∏–ª—å–Ω–µ–µ —Å –∫–∞–∂–¥—ã–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ–º!'
        }
    
    def get_day3_content(self) -> dict:
        """–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –¥–Ω—è 3"""
        return {
            'title': 'üèãÔ∏è‚Äç‚ôÄÔ∏è –î–ï–ù–¨ 3: –ò–ù–¢–ï–ù–°–ò–í–ù–ê–Ø –¢–†–ï–ù–ò–†–û–í–ö–ê',
            'description': '–§–∏–Ω–∞–ª—å–Ω—ã–π –¥–µ–Ω—å! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.',
            'image': 'DianaLisa3.jpg',
            'content': MESSAGES['training_day3'],
            'exercises': [
                {
                    'name': 'üî• –†–∞–∑–º–∏–Ω–∫–∞ (7 –º–∏–Ω—É—Ç)',
                    'description': '–ü–æ–ª–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ',
                    'exercises': [
                        '–ö–∞—Ä–¥–∏–æ —Ä–∞–∑–º–∏–Ω–∫–∞ - 3 –º–∏–Ω—É—Ç—ã',
                        '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞ - 2 –º–∏–Ω—É—Ç—ã',
                        '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—É—Å—Ç–∞–≤–æ–≤ - 2 –º–∏–Ω—É—Ç—ã'
                    ]
                },
                {
                    'name': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (25 –º–∏–Ω—É—Ç)',
                    'description': '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Ç–æ–¥—É –¢–∞–±–∞—Ç–∞',
                    'exercises': [
                        '–¢–∞–±–∞—Ç–∞ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è: 4 —Ä–∞—É–Ω–¥–∞ –ø–æ 20 —Å–µ–∫',
                        '–¢–∞–±–∞—Ç–∞ –æ—Ç–∂–∏–º–∞–Ω–∏—è: 4 —Ä–∞—É–Ω–¥–∞ –ø–æ 20 —Å–µ–∫',
                        '–¢–∞–±–∞—Ç–∞ –ø–ª–∞–Ω–∫–∞: 4 —Ä–∞—É–Ω–¥–∞ –ø–æ 20 —Å–µ–∫',
                        '–¢–∞–±–∞—Ç–∞ –≤—ã–ø–∞–¥—ã: 4 —Ä–∞—É–Ω–¥–∞ –ø–æ 20 —Å–µ–∫',
                        '–ë—É—Ä–ø–∏ —Å –ø—Ä—ã–∂–∫–æ–º: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10 —Ä–∞–∑',
                        '–ü–ª–∞–Ω–∫–∞ —Å –±–æ–∫–æ–≤—ã–º–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞–º–∏: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 45 —Å–µ–∫'
                    ]
                },
                {
                    'name': 'üßò‚Äç‚ôÄÔ∏è –ó–∞–º–∏–Ω–∫–∞ (8 –º–∏–Ω—É—Ç)',
                    'description': '–ü–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ',
                    'exercises': [
                        '–ü–æ–ª–Ω–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞ - 4 –º–∏–Ω—É—Ç—ã',
                        '–î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è - 2 –º–∏–Ω—É—Ç—ã',
                        '–ú–µ–¥–∏—Ç–∞—Ü–∏—è - 2 –º–∏–Ω—É—Ç—ã'
                    ]
                }
            ],
            'tips': [
                'üéØ –¢–∞–±–∞—Ç–∞: 20 —Å–µ–∫ —Ä–∞–±–æ—Ç—ã, 10 —Å–µ–∫ –æ—Ç–¥—ã—Ö–∞',
                'üí® –î—ã—à–∏ —á–µ—Ä–µ–∑ –Ω–æ—Å, –≤—ã–¥—ã—Ö–∞–π —á–µ—Ä–µ–∑ —Ä–æ—Ç',
                'üèÜ –ì–æ—Ä–¥–∏—Å—å —Å–æ–±–æ–π - —Ç—ã –ø—Ä–æ—à–ª–∞ 3 –¥–Ω—è!',
                'üéâ –ì–æ—Ç–æ–≤—å—Å—è –∫ –ø–æ–ª–Ω–æ–º—É –∫—É—Ä—Å—É!'
            ],
            'motivation': 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø—Ä–æ—à–ª–∞ –±–∞–∑–æ–≤—ã–π –∫—É—Ä—Å!'
        }
    
    async def send_training_content(self, query, day: int, context):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        try:
            user_id = query.from_user.id
            user = db.get_user(user_id)
            
            if not user:
                try:
                    await query.delete_message()
                except:
                    pass
                
                await context.bot.send_message(
                    chat_id=user_id,
                    text="‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
                    reply_markup=keyboards.back_to_main()
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —ç—Ç–æ–≥–æ –¥–Ω—è
            if not self.can_access_training(user, day):
                try:
                    await query.delete_message()
                except:
                    pass
                
                await context.bot.send_message(
                    chat_id=user_id,
                    text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ. –ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏.",
                    reply_markup=keyboards.main_menu()
                )
                return
            
            content = self.training_content.get(day)
            if not content:
                try:
                    await query.delete_message()
                except:
                    pass
                
                await context.bot.send_message(
                    chat_id=user_id,
                    text="‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=keyboards.back_to_main()
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = f"""
{content['title']}

{content['content']}
            """
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [InlineKeyboardButton("‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", callback_data=f'mark_training_{day}')],
                [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='main_menu')]
            ]
            
            if day == 3:
                keyboard.insert(1, [InlineKeyboardButton("üíé –ü–æ–ª–Ω—ã–π –∫—É—Ä—Å", callback_data='full_course')])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if content['image']:
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                try:
                    await query.delete_message()
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º
                from utils import send_image_with_text
                await send_image_with_text(
                    bot=context.bot,
                    chat_id=user_id,
                    image_path=content['image'],
                    text=message_text,
                    reply_markup=reply_markup,
                    parse_mode=ParseMode.HTML
                )
            else:
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                try:
                    await query.delete_message()
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                
                await context.bot.send_message(
                    chat_id=user_id,
                    text=message_text,
                    reply_markup=reply_markup,
                    parse_mode=ParseMode.HTML
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            db.add_analytics_event(user_id, 'training_viewed', f'day_{day}')
            
            logger.info(f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è {day} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {e}")
            try:
                await query.delete_message()
            except:
                pass
            
            await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.",
                reply_markup=keyboards.back_to_main()
            )
    
    def can_access_training(self, user: dict, day: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ"""
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, –µ—Å–ª–∏:
        # 1. –≠—Ç–æ –µ–≥–æ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏
        # 2. –û–Ω –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º)
        
        if user['is_premium']:
            return True
        
        return day <= user['current_day']
    
    async def complete_training(self, user_id: int, day: int):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        try:
            user = db.get_user(user_id)
            if not user:
                return False
            
            # –û—Ç–º–µ—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
            db.mark_training_completed(user_id)
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –±–∞–∑–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª–Ω—ã–π –∫—É—Ä—Å
            if day == 3 and not user['is_premium']:
                await self.offer_full_course(user_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            db.add_analytics_event(user_id, 'training_completed', f'day_{day}')
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≤–µ—Ä—à–∏–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–Ω—è {day}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {e}")
            return False
    
    async def offer_full_course(self, user_id: int):
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            import main
            application = main.application
            
            if not application:
                logger.warning("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
                return
            
            offer_text = """
üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∑–∞–≤–µ—Ä—à–∏–ª–∞ –±–∞–∑–æ–≤—ã–π –∫—É—Ä—Å!

üíé –ì–æ—Ç–æ–≤–∞ –∫ –ø–æ–ª–Ω–æ–º—É –∫—É—Ä—Å—É DianaLisa?

‚ú® –ß—Ç–æ —Ç–µ–±—è –∂–¥–µ—Ç:
‚Ä¢ 30 –¥–Ω–µ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
‚Ä¢ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –º–µ—Å—è—Ü
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É —á–∞—Ç—É
‚Ä¢ –ë–æ–Ω—É—Å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã

üî• –°–∫–∏–¥–∫–∞ 50% —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è!
            """
            
            await application.bot.send_message(
                chat_id=user_id,
                text=offer_text,
                reply_markup=keyboards.course_packages(),
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫—É—Ä—Å–∞: {e}")
    
    def get_training_progress(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user = db.get_user(user_id)
            if not user:
                return {}
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
            training_events = db.get_user_stats(user_id).get('events', {})
            
            return {
                'current_day': user['current_day'],
                'is_premium': user['is_premium'],
                'training_completed': user['training_completed'],
                'total_trainings': training_events.get('training_completed', 0),
                'days_completed': min(user['current_day'], 3),
                'progress_percentage': (min(user['current_day'], 3) / 3) * 100
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {e}")
            return {}
    
    async def send_training_reminder(self, user_id: int, day: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            import main
            application = main.application
            
            if not application:
                logger.warning("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
                return
            
            user = db.get_user(user_id)
            if not user:
                return
            
            reminder_text = f"""
‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!

üëã –ü—Ä–∏–≤–µ—Ç, {user['first_name']}!

üèãÔ∏è‚Äç‚ôÄÔ∏è –í—Ä–µ–º—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –î–Ω—è {day}!

üí™ –¢—ã –º–æ–∂–µ—à—å —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å! –ù–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!
            """
            
            await application.bot.send_message(
                chat_id=user_id,
                text=reminder_text,
                reply_markup=keyboards.training_menu(day),
                parse_mode=ParseMode.HTML
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            db.add_analytics_event(user_id, 'training_reminder_sent', f'day_{day}')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
training_system = TrainingSystem()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å callbacks.py
async def send_training_content(query, day: int, context):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    await training_system.send_training_content(query, day, context)
