"""
ü§ñ –¢–µ—Å—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
–°–∏–º—É–ª–∏—Ä—É–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º
"""

import asyncio
import sys
import os
from unittest.mock import AsyncMock, MagicMock, patch

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database import Database
from callbacks import CallbackHandlers
from keyboards import Keyboards
from health_tips import health_tips

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä
keyboards = Keyboards()

class BotSimulator:
    """–°–∏–º—É–ª—è—Ç–æ—Ä –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º"""
    
    def __init__(self):
        self.db_path = "test_simulation.db"
        if os.path.exists(self.db_path):
            os.remove(self.db_path)
        
        self.db = Database(self.db_path)
        self.db.init_database()
        self.callback_handler = CallbackHandlers()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.test_users = [
            {'user_id': 7001, 'username': 'sim_user_1', 'first_name': '–°–∏–º—É–ª—è—Ç–æ—Ä1', 'email': 'sim1@test.com'},
            {'user_id': 7002, 'username': 'sim_user_2', 'first_name': '–°–∏–º—É–ª—è—Ç–æ—Ä2', 'email': 'sim2@test.com'},
            {'user_id': 7003, 'username': 'sim_user_3', 'first_name': '–°–∏–º—É–ª—è—Ç–æ—Ä3', 'email': 'sim3@test.com'},
        ]
    
    def setup_test_users(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–Ω—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
        print("üë• –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1: –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        self.db.add_user(**self.test_users[0])
        print(f"‚úÖ {self.test_users[0]['first_name']} - –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2: –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        self.db.add_user(**self.test_users[1])
        self.db.update_user(7002, 
                          training_completed=True,
                          nutrition_marked=True,
                          water_marked=False,
                          sleep_marked=True,
                          current_day=2)
        print(f"‚úÖ {self.test_users[1]['first_name']} - –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–¥–µ–Ω—å 2)")
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 3: –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        self.db.add_user(**self.test_users[2])
        self.db.update_user(7003,
                          training_completed=True,
                          nutrition_marked=True,
                          water_marked=True,
                          sleep_marked=True,
                          is_premium=True,
                          current_day=3)
        print(f"‚úÖ {self.test_users[2]['first_name']} - –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–¥–µ–Ω—å 3)")
    
    def create_mock_update(self, user_id, callback_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫ –æ–±—ä–µ–∫—Ç–∞ Update"""
        mock_update = MagicMock()
        mock_query = MagicMock()
        mock_user = MagicMock()
        
        mock_user.id = user_id
        mock_query.from_user = mock_user
        mock_query.data = callback_data
        mock_update.callback_query = mock_query
        
        return mock_update
    
    def create_mock_context(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫ –æ–±—ä–µ–∫—Ç–∞ Context"""
        return MagicMock()
    
    async def simulate_user_actions(self, user_id):
        """–°–∏–º—É–ª—è—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print(f"\nüéÆ –°–∏–º—É–ª—è—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
        
        mock_context = self.create_mock_context()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = self.db.get_user(user_id)
        if not user:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['first_name']} (–¥–µ–Ω—å {user['current_day']})")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ —á–µ–∫-–ª–∏—Å—Ç–∞
        checklist_actions = [
            ('mark_training', '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞'),
            ('mark_nutrition', '–ü–∏—Ç–∞–Ω–∏–µ'),
            ('mark_water', '–í–æ–¥–∞'),
            ('mark_sleep', '–°–æ–Ω')
        ]
        
        for callback_data, action_name in checklist_actions:
            print(f"üîò –ù–∞–∂–∞—Ç–∏–µ: {action_name}")
            
            mock_update = self.create_mock_update(user_id, callback_data)
            
            try:
                # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                if callback_data == 'mark_training':
                    await self.callback_handler.handle_mark_training(mock_update, mock_context, callback_data)
                elif callback_data == 'mark_nutrition':
                    await self.callback_handler.handle_mark_nutrition(mock_update, mock_context, callback_data)
                elif callback_data == 'mark_water':
                    await self.callback_handler.handle_mark_water(mock_update, mock_context, callback_data)
                elif callback_data == 'mark_sleep':
                    await self.callback_handler.handle_mark_sleep(mock_update, mock_context, callback_data)
                
                print(f"‚úÖ {action_name} - –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {action_name}: {e}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —á–∞—Å–æ–≤ —Å–Ω–∞
        sleep_hours = ['sleep_6h', 'sleep_7h', 'sleep_8h', 'sleep_9h']
        for sleep_hour in sleep_hours:
            print(f"üîò –í—ã–±–æ—Ä —Å–Ω–∞: {sleep_hour}")
            
            mock_update = self.create_mock_update(user_id, sleep_hour)
            
            try:
                await self.callback_handler.handle_sleep_hours(mock_update, mock_context, sleep_hour)
                print(f"‚úÖ {sleep_hour} - –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                break  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤—ã–±–æ—Ä
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {sleep_hour}: {e}")
    
    def test_keyboards_generation(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
        print("\n‚å®Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
        
        # –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        main_menu = keyboards.main_menu()
        print("‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        
        # –¢–µ—Å—Ç —á–µ–∫-–ª–∏—Å—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for user_data in self.test_users:
            user = self.db.get_user(user_data['user_id'])
            if user:
                checklist = keyboards.checklist_menu(user)
                print(f"‚úÖ –ß–µ–∫-–ª–∏—Å—Ç –¥–ª—è {user['first_name']} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤ —Å–Ω–∞
        sleep_menu = keyboards.sleep_hours_menu()
        print("‚úÖ –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤ —Å–Ω–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
    
    def test_health_tips_generation(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é"""
        print("\nüí° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–≤–µ—Ç–æ–≤...")
        
        for user_data in self.test_users:
            user_id = user_data['user_id']
            
            # –¢–µ—Å—Ç —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –≤–æ–¥–µ
            water_tip = health_tips.get_water_tip(user_id)
            print(f"‚úÖ –°–æ–≤–µ—Ç –ø–æ –≤–æ–¥–µ –¥–ª—è {user_data['first_name']}: {water_tip[:30]}...")
            
            # –¢–µ—Å—Ç —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –∑–∞–≤—Ç—Ä–∞–∫—É
            breakfast_tip = health_tips.get_breakfast_tip(user_id)
            print(f"‚úÖ –°–æ–≤–µ—Ç –ø–æ –∑–∞–≤—Ç—Ä–∞–∫—É –¥–ª—è {user_data['first_name']}: {breakfast_tip[:30]}...")
            
            # –¢–µ—Å—Ç —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —É–∂–∏–Ω—É
            dinner_tip = health_tips.get_dinner_tip(user_id)
            print(f"‚úÖ –°–æ–≤–µ—Ç –ø–æ —É–∂–∏–Ω—É –¥–ª—è {user_data['first_name']}: {dinner_tip[:30]}...")
            
            # –¢–µ—Å—Ç —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —Å–Ω—É
            sleep_tip = health_tips.get_sleep_tip(user_id)
            print(f"‚úÖ –°–æ–≤–µ—Ç –ø–æ —Å–Ω—É –¥–ª—è {user_data['first_name']}: {sleep_tip[:30]}...")
    
    def test_database_queries(self):
        """–¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = self.db.get_all_users()
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(all_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –¢–µ—Å—Ç –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        count = self.db.get_users_count()
        print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å—É
        premium_users = [user for user in all_users if user.get('is_premium', False)]
        print(f"‚úÖ –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(premium_users)}")
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        for user_data in self.test_users:
            user_id = user_data['user_id']
            self.db.add_analytics_event(user_id, 'simulation_test', 'button_press')
        print("‚úÖ –°–æ–±—ã—Ç–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if os.path.exists(self.db_path):
            os.remove(self.db_path)
        print("üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
    
    async def run_simulation(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º")
        print("=" * 60)
        
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞
            self.setup_test_users()
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
            self.test_keyboards_generation()
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–µ—Ç–æ–≤
            self.test_health_tips_generation()
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self.test_database_queries()
            
            # –°–∏–º—É–ª—è—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for user_data in self.test_users:
                await self.simulate_user_actions(user_data['user_id'])
            
            print("\n" + "=" * 60)
            print("üéâ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print("=" * 60)
            
        except Exception as e:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –°–ò–ú–£–õ–Ø–¶–ò–ò: {e}")
            raise
        
        finally:
            self.cleanup()

async def run_bot_simulation():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏"""
    simulator = BotSimulator()
    await simulator.run_simulation()

if __name__ == "__main__":
    asyncio.run(run_bot_simulation())
