"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è DianaLisaBot
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞
"""

import pytest
import asyncio
import sqlite3
from unittest.mock import AsyncMock, MagicMock, patch
from datetime import datetime, timedelta
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database import Database
from registration import RegistrationHandler
from callbacks import CallbackHandlers
from keyboards import Keyboards
from health_tips import health_tips
from config import MESSAGES, BUTTONS
import tempfile
import shutil

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
@pytest.fixture(scope="session")
def temp_db():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    temp_dir = tempfile.mkdtemp()
    db_path = os.path.join(temp_dir, "test_session.db")
    db = Database(db_path)
    db.init_database()
    yield db
    # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    try:
        shutil.rmtree(temp_dir)
    except:
        pass

@pytest.fixture(scope="function")
def clean_db(temp_db):
    """–û—á–∏—â–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    with sqlite3.connect(temp_db.db_path) as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM users")
        cursor.execute("DELETE FROM analytics")
        cursor.execute("DELETE FROM scheduled_jobs")
        cursor.execute("DELETE FROM payments")
        cursor.execute("DELETE FROM training_feedback")
        conn.commit()
    return temp_db

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä
keyboards = Keyboards()

class TestDianaLisaBotIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞"""
    
    def test_database_operations(self, clean_db):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
        
        db = clean_db
        
        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        test_users = [
            {
                'user_id': 1001,
                'username': 'test_user_1',
                'first_name': '–ê–Ω–Ω–∞',
                'email': 'anna@test.com',
                'timezone': 'Europe/Moscow'
            },
            {
                'user_id': 1002,
                'username': 'test_user_2',
                'first_name': '–ú–∞—Ä–∏—è',
                'email': 'maria@test.com',
                'timezone': 'Europe/Moscow'
            },
            {
                'user_id': 1003,
                'username': 'test_user_3',
                'first_name': '–ï–ª–µ–Ω–∞',
                'email': 'elena@test.com',
                'timezone': 'Europe/Moscow'
            }
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user in test_users:
            success = db.add_user(**user)
            assert success, f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['user_id']}"
            print(f"OK: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['first_name']} –¥–æ–±–∞–≤–ª–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        count = db.get_users_count()
        assert count == 3, f"–û–∂–∏–¥–∞–ª–æ—Å—å 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ª—É—á–µ–Ω–æ {count}"
        print(f"OK: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.get_user(1001)
        assert user is not None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert user['first_name'] == '–ê–Ω–Ω–∞', "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        print(f"OK: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user['first_name']}")
        
        # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.update_user(1001, training_completed=True)
        updated_user = db.get_user(1001)
        assert updated_user['training_completed'] == True, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –æ—Ç–º–µ—á–µ–Ω–∞"
        print("OK: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω")
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        db.add_analytics_event(1001, 'test_event', 'test_data')
        print("OK: –°–æ–±—ã—Ç–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    
    def test_keyboards(self):
        """–¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
        print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
        
        # –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        main_menu = keyboards.main_menu()
        assert main_menu is not None, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–µ —Å–æ–∑–¥–∞–Ω–æ"
        print("OK: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–æ")
        
        # –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        main_menu = keyboards.main_menu()
        assert main_menu is not None, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–µ —Å–æ–∑–¥–∞–Ω–æ"
        print("OK: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–æ")
    
    def test_health_tips(self):
        """–¢–µ—Å—Ç —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é"""
        print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é...")
        
        test_user_id = 3001
        
        # –¢–µ—Å—Ç —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –∑–∞–≤—Ç—Ä–∞–∫—É
        breakfast_tip = health_tips.get_breakfast_tip(test_user_id)
        assert breakfast_tip is not None, "–°–æ–≤–µ—Ç –ø–æ –∑–∞–≤—Ç—Ä–∞–∫—É –Ω–µ –ø–æ–ª—É—á–µ–Ω"
        assert len(breakfast_tip) > 0, "–°–æ–≤–µ—Ç –ø–æ –∑–∞–≤—Ç—Ä–∞–∫—É –ø—É—Å—Ç–æ–π"
        print(f"OK: –°–æ–≤–µ—Ç –ø–æ –∑–∞–≤—Ç—Ä–∞–∫—É: {breakfast_tip[:50].replace('üíß', '').replace('üåÖ', '').replace('üåô', '').replace('üò¥', '')}...")
        
        # –¢–µ—Å—Ç —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —É–∂–∏–Ω—É
        dinner_tip = health_tips.get_dinner_tip(test_user_id)
        assert dinner_tip is not None, "–°–æ–≤–µ—Ç –ø–æ —É–∂–∏–Ω—É –Ω–µ –ø–æ–ª—É—á–µ–Ω"
        assert len(dinner_tip) > 0, "–°–æ–≤–µ—Ç –ø–æ —É–∂–∏–Ω—É –ø—É—Å—Ç–æ–π"
        print(f"OK: –°–æ–≤–µ—Ç –ø–æ —É–∂–∏–Ω—É: {dinner_tip[:50].replace('üíß', '').replace('üåÖ', '').replace('üåô', '').replace('üò¥', '')}...")
        
        print("OK: –í—Å–µ —Å–æ–≤–µ—Ç—ã –ø–æ –∑–¥–æ—Ä–æ–≤—å—é —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_user_progress_scenarios(self, clean_db):
        """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        db = clean_db
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user1 = {
            'user_id': 4001,
            'username': 'newbie',
            'first_name': '–ù–æ–≤–∏—á–æ–∫',
            'email': 'newbie@test.com',
            'timezone': 'Europe/Moscow'
        }
        db.add_user(**user1)
        user1_data = db.get_user(4001)
        assert user1_data['training_completed'] == False, "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
        assert user1_data['current_day'] == 1, "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ 1 –¥–Ω–µ"
        print("OK: –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user2 = {
            'user_id': 4002,
            'username': 'active',
            'first_name': '–ê–∫—Ç–∏–≤–Ω—ã–π',
            'email': 'active@test.com',
            'timezone': 'Europe/Moscow'
        }
        db.add_user(**user2)
        db.update_user(4002, 
                      training_completed=True,
                      current_day=2)
        user2_data = db.get_user(4002)
        assert user2_data['training_completed'] == True, "–ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
        assert user2_data['current_day'] == 2, "–ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ 2 –¥–Ω–µ"
        print("OK: –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user3 = {
            'user_id': 4003,
            'username': 'premium',
            'first_name': '–ü—Ä–µ–º–∏—É–º',
            'email': 'premium@test.com',
            'timezone': 'Europe/Moscow'
        }
        db.add_user(**user3)
        db.update_user(4003,
                      is_premium=True,
                      premium_expires=(datetime.now() + timedelta(days=30)).strftime('%Y-%m-%d %H:%M:%S'),
                      current_day=3)
        user3_data = db.get_user(4003)
        assert user3_data['is_premium'] == True, "–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å"
        assert user3_data['current_day'] == 3, "–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ 3 –¥–Ω–µ"
        print("OK: –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    
    def test_performance(self, clean_db):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        db = clean_db
        import time
        
        # –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        start_time = time.time()
        
        for i in range(100):
            db.add_user(
                user_id=6000 + i,
                username=f'perf_test_{i}',
                first_name=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å{i}',
                email=f'user{i}@test.com'
            )
        
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"OK: –î–æ–±–∞–≤–ª–µ–Ω–æ 100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
        assert duration < 15.0, f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–Ω—è–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {duration:.2f}—Å"
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        start_time = time.time()
        users = db.get_all_users()
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"OK: –ü–æ–ª—É—á–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
        assert duration < 1.0, f"–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–Ω—è–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {duration:.2f}—Å"

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ pytest
    import subprocess
    subprocess.run(["python", "-m", "pytest", __file__, "-v"])
