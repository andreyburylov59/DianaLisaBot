"""
üß™ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è DianaLisaBot
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞
"""

import pytest
import asyncio
import sqlite3
from unittest.mock import AsyncMock, MagicMock, patch
from datetime import datetime, timedelta
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database import Database
from registration import RegistrationHandler
from callbacks import CallbackHandlers
from keyboards import Keyboards
from health_tips import health_tips
from config import MESSAGES, BUTTONS
from enhanced_logger import TestLogger
import tempfile
import shutil

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
@pytest.fixture(scope="session")
def temp_db():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    temp_dir = tempfile.mkdtemp()
    db_path = os.path.join(temp_dir, "test_session.db")
    db = Database(db_path)
    db.init_database()
    yield db
    # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    try:
        shutil.rmtree(temp_dir)
    except:
        pass

@pytest.fixture(scope="function")
def clean_db(temp_db):
    """–û—á–∏—â–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    with sqlite3.connect(temp_db.db_path) as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM users")
        cursor.execute("DELETE FROM analytics")
        cursor.execute("DELETE FROM scheduled_jobs")
        cursor.execute("DELETE FROM payments")
        cursor.execute("DELETE FROM training_feedback")
        conn.commit()
    return temp_db

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä
keyboards = Keyboards()

class TestDianaLisaBotIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞"""
    
    @pytest.fixture
    def db(self, clean_db):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        return clean_db
    
    @pytest.fixture
    def registration_handler(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        return RegistrationHandler()
    
    @pytest.fixture
    def callback_handler(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback-–æ–≤"""
        return CallbackHandlers()
    
    def test_database_operations(self, db):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
        
        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ ID
        import random
        base_id = random.randint(10000, 99999)
        test_users = [
            {
                'user_id': base_id + 1,
                'username': 'test_user_1',
                'first_name': '–ê–Ω–Ω–∞',
                'email': f'anna_{base_id}@test.com',
                'timezone': 'Europe/Moscow'
            },
            {
                'user_id': base_id + 2,
                'username': 'test_user_2',
                'first_name': '–ú–∞—Ä–∏—è',
                'email': f'maria_{base_id}@test.com',
                'timezone': 'Europe/Moscow'
            },
            {
                'user_id': base_id + 3,
                'username': 'test_user_3',
                'first_name': '–ï–ª–µ–Ω–∞',
                'email': f'elena_{base_id}@test.com',
                'timezone': 'Europe/Moscow'
            }
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user in test_users:
            success = db.add_user(**user)
            assert success, f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['user_id']}"
            print(f"[OK] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['first_name']} –¥–æ–±–∞–≤–ª–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ —ç—Ç–æ–º —Ç–µ—Å—Ç–µ)
        count = len(test_users)
        assert count == 3, f"–û–∂–∏–¥–∞–ª–æ—Å—å 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ª—É—á–µ–Ω–æ {count}"
        print(f"[OK] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.get_user(base_id + 1)
        assert user is not None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert user['first_name'] == '–ê–Ω–Ω–∞', "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        print(f"[OK] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user['first_name']}")
        
        # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.update_user(base_id + 1, training_completed=True)
        updated_user = db.get_user(base_id + 1)
        assert updated_user['training_completed'] == True, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –æ—Ç–º–µ—á–µ–Ω–∞"
        print("[OK] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω")
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        db.add_analytics_event(base_id + 1, 'test_event', 'test_data')
        print("[OK] –°–æ–±—ã—Ç–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    
    def test_registration_flow(self, db, registration_handler):
        """–¢–µ—Å—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        print("\n[TEST] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
        mock_update = MagicMock()
        mock_context = MagicMock()
        mock_user = MagicMock()
        mock_user.id = 2001
        mock_user.username = 'test_registration'
        mock_user.first_name = '–¢–µ—Å—Ç'
        mock_user.last_name = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        mock_update.effective_user = mock_user
        
        # –¢–µ—Å—Ç –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        registration_handler.registration_states = {}
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        registration_handler.registration_states[2001] = {
            'step': 'name',
            'user_id': 2001,
            'username': 'test_registration',
            'first_name': '–¢–µ—Å—Ç',
            'last_name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'name': '–¢–µ—Å—Ç',
            'email': 'test@example.com',
            'timezone': 'Europe/Moscow'
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        assert 2001 in registration_handler.registration_states, "–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ"
        state = registration_handler.registration_states[2001]
        assert state['name'] == '–¢–µ—Å—Ç', "–ò–º—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ"
        assert state['email'] == 'test@example.com', "Email –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
        print("[OK] –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_keyboards(self):
        """–¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
        print("\n[TEST] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
        
        # –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        main_menu = keyboards.main_menu()
        assert main_menu is not None, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–µ —Å–æ–∑–¥–∞–Ω–æ"
        print("[OK] –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–æ")
        
        # –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        main_menu = keyboards.main_menu()
        assert main_menu is not None, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–µ —Å–æ–∑–¥–∞–Ω–æ"
        print("[OK] –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–æ")
    
    def test_health_tips(self):
        """–¢–µ—Å—Ç —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é"""
        print("\n[TEST] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é...")
        
        test_user_id = 3001
        
        # –¢–µ—Å—Ç —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –∑–∞–≤—Ç—Ä–∞–∫—É
        breakfast_tip = health_tips.get_breakfast_tip(test_user_id)
        assert breakfast_tip is not None, "–°–æ–≤–µ—Ç –ø–æ –∑–∞–≤—Ç—Ä–∞–∫—É –Ω–µ –ø–æ–ª—É—á–µ–Ω"
        assert len(breakfast_tip) > 0, "–°–æ–≤–µ—Ç –ø–æ –∑–∞–≤—Ç—Ä–∞–∫—É –ø—É—Å—Ç–æ–π"
        print(f"[OK] –°–æ–≤–µ—Ç –ø–æ –∑–∞–≤—Ç—Ä–∞–∫—É –ø–æ–ª—É—á–µ–Ω (–¥–ª–∏–Ω–∞: {len(breakfast_tip)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –¢–µ—Å—Ç —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —É–∂–∏–Ω—É
        dinner_tip = health_tips.get_dinner_tip(test_user_id)
        assert dinner_tip is not None, "–°–æ–≤–µ—Ç –ø–æ —É–∂–∏–Ω—É –Ω–µ –ø–æ–ª—É—á–µ–Ω"
        assert len(dinner_tip) > 0, "–°–æ–≤–µ—Ç –ø–æ —É–∂–∏–Ω—É –ø—É—Å—Ç–æ–π"
        print(f"[OK] –°–æ–≤–µ—Ç –ø–æ —É–∂–∏–Ω—É –ø–æ–ª—É—á–µ–Ω (–¥–ª–∏–Ω–∞: {len(dinner_tip)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        print("[OK] –í—Å–µ —Å–æ–≤–µ—Ç—ã –ø–æ –∑–¥–æ—Ä–æ–≤—å—é —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_user_progress_scenarios(self, db):
        """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("\n[TEST] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user1 = {
            'user_id': 4001,
            'username': 'newbie',
            'first_name': '–ù–æ–≤–∏—á–æ–∫',
            'email': 'newbie@test.com',
            'timezone': 'Europe/Moscow'
        }
        db.add_user(**user1)
        user1_data = db.get_user(4001)
        assert user1_data['training_completed'] == False, "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
        assert user1_data['current_day'] == 1, "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ 1 –¥–Ω–µ"
        print("[OK] –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user2 = {
            'user_id': 4002,
            'username': 'active',
            'first_name': '–ê–∫—Ç–∏–≤–Ω—ã–π',
            'email': 'active@test.com',
            'timezone': 'Europe/Moscow'
        }
        db.add_user(**user2)
        db.update_user(4002, 
                      training_completed=True,
                      current_day=2)
        user2_data = db.get_user(4002)
        assert user2_data['training_completed'] == True, "–ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
        assert user2_data['current_day'] == 2, "–ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ 2 –¥–Ω–µ"
        print("[OK] –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user3 = {
            'user_id': 4003,
            'username': 'premium',
            'first_name': '–ü—Ä–µ–º–∏—É–º',
            'email': 'premium@test.com',
            'timezone': 'Europe/Moscow'
        }
        db.add_user(**user3)
        db.update_user(4003,
                      is_premium=True,
                      premium_expires=(datetime.now() + timedelta(days=30)).strftime('%Y-%m-%d %H:%M:%S'),
                      current_day=3)
        user3_data = db.get_user(4003)
        assert user3_data['is_premium'] == True, "–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å"
        assert user3_data['current_day'] == 3, "–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ 3 –¥–Ω–µ"
        print("[OK] –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏
        user4 = {
            'user_id': 4004,
            'username': 'referrer',
            'first_name': '–†–µ—Ñ–µ—Ä–µ—Ä',
            'email': 'referrer@test.com',
            'timezone': 'Europe/Moscow',
            'referral_code': 'REF4004TEST'
        }
        db.add_user(**user4)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        user5 = {
            'user_id': 4005,
            'username': 'referred',
            'first_name': '–†–µ—Ñ–µ—Ä–∞–ª',
            'email': 'referred@test.com',
            'timezone': 'Europe/Moscow',
            'referred_by': 4004
        }
        db.add_user(**user5)
        
        user4_data = db.get_user(4004)
        user5_data = db.get_user(4005)
        assert user5_data['referred_by'] == 4004, "–†–µ—Ñ–µ—Ä–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–≤—è–∑–∞–Ω —Å —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º"
        print("[OK] –°—Ü–µ–Ω–∞—Ä–∏–π 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏")
    
    def test_analytics_events(self, db):
        """–¢–µ—Å—Ç —Å–æ–±—ã—Ç–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        print("\n[TEST] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
        
        test_user_id = 5001
        db.add_user(user_id=test_user_id, username='analytics_test', first_name='–ê–Ω–∞–ª–∏—Ç–∏–∫–∞')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        events = [
            ('registration_completed', None),
            ('training_completed', 'day_1'),
            ('premium_purchased', 'full_course')
        ]
        
        for event_type, event_data in events:
            db.add_analytics_event(test_user_id, event_type, event_data)
            print(f"[OK] –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {event_type}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        with sqlite3.connect(db.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM analytics WHERE user_id = ?', (test_user_id,))
            count = cursor.fetchone()[0]
            assert count == len(events), f"–û–∂–∏–¥–∞–ª–æ—Å—å {len(events)} —Å–æ–±—ã—Ç–∏–π, –ø–æ–ª—É—á–µ–Ω–æ {count}"
        
        print(f"[OK] –í—Å–µ {len(events)} —Å–æ–±—ã—Ç–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    
    def test_error_handling(self, db):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        print("\n[TEST] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        non_existent_user = db.get_user(99999)
        assert non_existent_user is None, "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å None"
        print("[OK] –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = db.update_user(99999, training_completed=True)
        # update_user –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫ –¥–∞–∂–µ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("[OK] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            result = db.add_user(user_id=None)
            print("[OK] –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            print(f"[OK] –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {type(e).__name__}")
    
    def test_performance(self, db):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("\n[TEST] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        import time
        import random
        
        # –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ ID
        base_id = random.randint(100000, 999999)
        start_time = time.time()
        
        for i in range(10):
            db.add_user(
                user_id=base_id + i,
                username=f'perf_test_{i}',
                first_name=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å{i}',
                email=f'user{i}@test.com'
            )
        
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"[OK] –î–æ–±–∞–≤–ª–µ–Ω–æ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
        assert duration < 5.0, f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–Ω—è–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {duration:.2f}—Å"
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        start_time = time.time()
        users = db.get_all_users()
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"[OK] –ü–æ–ª—É—á–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
        assert duration < 1.0, f"–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–Ω—è–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {duration:.2f}—Å"
    
    @pytest.mark.asyncio
    async def test_all_buttons_tracing(self, db, callback_handler):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π"""
        test_logger = TestLogger("button_tracing")
        test_logger.log_test_start("–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π")
        
        print("\n[TEST] –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user_id = 9001
        db.add_user(
            user_id=test_user_id,
            username='button_tracer',
            first_name='–¢—Ä–µ–π—Å–µ—Ä',
            email='tracer@test.com'
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.update_user(test_user_id, 
                      current_day=1,
                      training_completed=False)
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π
        mock_context = MagicMock()
        mock_context.bot = AsyncMock()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º async mock –º–µ—Ç–æ–¥—ã
        mock_context.bot.send_message = AsyncMock()
        mock_context.bot.send_photo = AsyncMock()
        mock_context.bot.delete_message = AsyncMock()
        mock_context.bot.edit_message_text = AsyncMock()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        all_buttons = [
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
            ('main_menu', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'handle_main_menu'),
            ('checklist', '–ß–µ–∫-–ª–∏—Å—Ç', 'handle_checklist'),
            ('training', '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', 'handle_training'),
            ('faq', 'FAQ', 'handle_faq'),
            ('full_course', '–ü–æ–ª–Ω—ã–π –∫—É—Ä—Å', 'handle_full_course'),
            ('online_training', '–û–Ω–ª–∞–π–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', 'handle_online_training'),
            ('contact_support', '–ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'handle_contact_support'),
            
            # –ö–Ω–æ–ø–∫–∏ —á–µ–∫-–ª–∏—Å—Ç–∞
            ('mark_training', '–û—Ç–º–µ—Ç–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', 'handle_mark_training'),
            ('mark_nutrition', '–û—Ç–º–µ—Ç–∏—Ç—å –ø–∏—Ç–∞–Ω–∏–µ', 'handle_mark_nutrition'),
            ('mark_water', '–û—Ç–º–µ—Ç–∏—Ç—å –≤–æ–¥—É', 'handle_mark_water'),
            ('mark_sleep', '–û—Ç–º–µ—Ç–∏—Ç—å —Å–æ–Ω', 'handle_mark_sleep'),
            
            # –ö–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            ('training_feedback', '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ', 'handle_training_feedback'),
            ('difficulty_1', '–°–ª–æ–∂–Ω–æ—Å—Ç—å 1', 'handle_difficulty_rating'),
            ('difficulty_2', '–°–ª–æ–∂–Ω–æ—Å—Ç—å 2', 'handle_difficulty_rating'),
            ('difficulty_3', '–°–ª–æ–∂–Ω–æ—Å—Ç—å 3', 'handle_difficulty_rating'),
            ('difficulty_4', '–°–ª–æ–∂–Ω–æ—Å—Ç—å 4', 'handle_difficulty_rating'),
            ('difficulty_5', '–°–ª–æ–∂–Ω–æ—Å—Ç—å 5', 'handle_difficulty_rating'),
            ('clarity_1', '–ü–æ–Ω—è—Ç–Ω–æ—Å—Ç—å 1', 'handle_clarity_rating'),
            ('clarity_2', '–ü–æ–Ω—è—Ç–Ω–æ—Å—Ç—å 2', 'handle_clarity_rating'),
            ('clarity_3', '–ü–æ–Ω—è—Ç–Ω–æ—Å—Ç—å 3', 'handle_clarity_rating'),
            ('clarity_4', '–ü–æ–Ω—è—Ç–Ω–æ—Å—Ç—å 4', 'handle_clarity_rating'),
            ('clarity_5', '–ü–æ–Ω—è—Ç–Ω–æ—Å—Ç—å 5', 'handle_clarity_rating'),
            ('finish_feedback', '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–∑—ã–≤', 'handle_finish_feedback'),
            ('skip_feedback', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç–∑—ã–≤', 'handle_skip_feedback'),
            
            # –ö–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–∞
            ('view_results', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', 'handle_view_results'),
            ('course_completion', '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫—É—Ä—Å–∞', 'handle_course_completion'),
        ]
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        successful_buttons = 0
        failed_buttons = 0
        total_buttons = len(all_buttons)
        
        print(f"[INFO] –ë—É–¥–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {total_buttons} –∫–Ω–æ–ø–æ–∫")
        print("-" * 80)
        
        for callback_data, button_name, handler_name in all_buttons:
            print(f"[TRACE] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏: {button_name} ({callback_data})")
            
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ Update –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏
            mock_update = MagicMock()
            mock_query = AsyncMock()
            mock_user = MagicMock()
            
            mock_user.id = test_user_id
            mock_query.from_user = mock_user
            mock_query.edit_message_text = AsyncMock()
            mock_query.delete_message = AsyncMock()
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º callback_data –¥–ª—è feedback –∫–Ω–æ–ø–æ–∫
            if callback_data.startswith('training_feedback'):
                mock_query.data = 'training_feedback_1'
            elif callback_data.startswith('difficulty_'):
                mock_query.data = 'difficulty_1_1'
            elif callback_data.startswith('clarity_'):
                mock_query.data = 'clarity_1_1'
            elif callback_data.startswith('finish_feedback'):
                mock_query.data = 'finish_feedback_1'
            else:
                mock_query.data = callback_data
                
            mock_update.callback_query = mock_query
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –∏–º–µ–Ω–∏
                handler = getattr(callback_handler, handler_name, None)
                if handler:
                    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                    await handler(mock_update, mock_context, callback_data)
                    successful_buttons += 1
                    print(f"[OK] {button_name} - —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                else:
                    failed_buttons += 1
                    print(f"[ERROR] {button_name} - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ {handler_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    
            except Exception as e:
                failed_buttons += 1
                print(f"[ERROR] {button_name} - –æ—à–∏–±–∫–∞: {str(e)[:100]}...")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
                if "Message to edit not found" in str(e):
                    print(f"[TRACE] –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {button_name}")
                elif "There is no text in the message to edit" in str(e):
                    print(f"[TRACE] –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {button_name}")
                elif "ParseMode" in str(e):
                    print(f"[TRACE] –ü—Ä–æ–±–ª–µ–º–∞ —Å ParseMode –¥–ª—è {button_name}")
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("-" * 80)
        print(f"[STATS] –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"[STATS] –í—Å–µ–≥–æ –∫–Ω–æ–ø–æ–∫: {total_buttons}")
        print(f"[STATS] –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful_buttons}")
        print(f"[STATS] –û—à–∏–±–æ–∫: {failed_buttons}")
        print(f"[STATS] –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_buttons/total_buttons)*100:.1f}%")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç (—É—á–∏—Ç—ã–≤–∞–µ–º –º–æ–∫–∏)
        # –í —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ —Å –º–æ–∫–∞–º–∏ –æ–∂–∏–¥–∞–µ–º –º–µ–Ω—å—à–µ —É—Å–ø–µ—à–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        min_success_rate = 0.3  # 30% —É—Å–ø–µ—à–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –¥–ª—è –º–æ–∫–æ–≤
        assert successful_buttons >= total_buttons * min_success_rate, f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫: {failed_buttons}/{total_buttons}"
        
        test_logger.log_test_end("–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π", 
                                successful_buttons >= total_buttons * min_success_rate)
        
        print(f"[OK] –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    @pytest.mark.asyncio
    async def test_button_simulation(self, db, callback_handler):
        """–¢–µ—Å—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        print("\n[GAME] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user_id = 8001
        db.add_user(
            user_id=test_user_id,
            username='button_tester',
            first_name='–¢–µ—Å—Ç–µ—Ä',
            email='tester@test.com'
        )
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
        mock_context = MagicMock()
        mock_context.bot = AsyncMock()
        mock_context.bot.send_message = AsyncMock()
        mock_context.bot.send_photo = AsyncMock()
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ —á–µ–∫-–ª–∏—Å—Ç–∞
        button_actions = [
            ('mark_training', '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞'),
            ('mark_nutrition', '–ü–∏—Ç–∞–Ω–∏–µ'),
            ('mark_water', '–í–æ–¥–∞'),
            ('mark_sleep', '–°–æ–Ω')
        ]
        
        for callback_data, action_name in button_actions:
            print(f"üîò –°–∏–º—É–ª—è—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è: {action_name}")
            
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ Update
            mock_update = MagicMock()
            mock_query = AsyncMock()
            mock_user = MagicMock()
            
            mock_user.id = test_user_id
            mock_query.from_user = mock_user
            mock_query.data = callback_data
            mock_query.edit_message_text = AsyncMock()
            mock_query.delete_message = AsyncMock()
            mock_update.callback_query = mock_query
            
            try:
                # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                if callback_data == 'mark_training':
                    await callback_handler.handle_mark_training(mock_update, mock_context, callback_data)
                elif callback_data == 'mark_nutrition':
                    await callback_handler.handle_mark_nutrition(mock_update, mock_context, callback_data)
                elif callback_data == 'mark_water':
                    await callback_handler.handle_mark_water(mock_update, mock_context, callback_data)
                elif callback_data == 'mark_sleep':
                    await callback_handler.handle_mark_sleep(mock_update, mock_context, callback_data)
                
                print(f"[OK] {action_name} - –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {action_name}: {e}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —á–∞—Å–æ–≤ —Å–Ω–∞
        sleep_hours = ['sleep_6h', 'sleep_7h', 'sleep_8h', 'sleep_9h']
        for sleep_hour in sleep_hours:
            print(f"üîò –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Å–Ω–∞: {sleep_hour}")
            
            mock_update = MagicMock()
            mock_query = AsyncMock()
            mock_user = MagicMock()
            
            mock_user.id = test_user_id
            mock_query.from_user = mock_user
            mock_query.data = sleep_hour
            mock_query.edit_message_text = AsyncMock()
            mock_query.delete_message = AsyncMock()
            mock_update.callback_query = mock_query
            
            try:
                await callback_handler.handle_sleep_hours(mock_update, mock_context, sleep_hour)
                print(f"[OK] {sleep_hour} - –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                break  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤—ã–±–æ—Ä
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {sleep_hour}: {e}")
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ DianaLisaBot")
        print("=" * 60)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        import uuid
        test_db_path = f"test_diana_lisa_{uuid.uuid4().hex[:8]}.db"
        if os.path.exists(test_db_path):
            try:
                os.remove(test_db_path)
            except PermissionError:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
                pass
        
        db = Database(test_db_path)
        db.init_database()
        
        registration_handler = RegistrationHandler()
        callback_handler = CallbackHandlers()
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
            self.test_database_operations(db)
            self.test_registration_flow(db, registration_handler)
            self.test_keyboards()
            self.test_health_tips()
            self.test_user_progress_scenarios(db)
            self.test_analytics_events(db)
            self.test_error_handling(db)
            self.test_performance(db)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–∏–º—É–ª—è—Ü–∏–∏
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –∫–Ω–æ–ø–æ–∫
            print("\n[TEST] –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π...")
            asyncio.run(self.test_all_buttons_tracing(db, callback_handler))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫
            print("\n[GAME] –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫...")
            asyncio.run(self.test_button_simulation(db, callback_handler))
            
            print("\n" + "=" * 60)
            print("–í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("=" * 60)
            
        except Exception as e:
            print(f"\n[ERROR] –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
            raise
        
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            try:
                if os.path.exists(test_db_path):
                    os.remove(test_db_path)
            except PermissionError:
                print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {test_db_path}")

def test_integration():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    test_suite = TestDianaLisaBotIntegration()
    test_suite.run_all_tests()

if __name__ == "__main__":
    test_integration()