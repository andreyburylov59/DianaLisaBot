"""
üß™ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è DianaLisaBot
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å—é
"""

import pytest
import asyncio
import sqlite3
import time
import json
from unittest.mock import AsyncMock, MagicMock, patch
from datetime import datetime, timedelta
import os
import sys
from typing import Dict, List, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database import Database
from registration import RegistrationHandler
from callbacks import CallbackHandlers
from keyboards import Keyboards
from health_tips import health_tips
from config import MESSAGES, BUTTONS
from enhanced_logger import TestLogger as Logger, StructuredLogger

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä
keyboards = Keyboards()

class EnhancedTestSuite:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    def __init__(self):
        self.test_logger = Logger("enhanced_suite")
        self.main_logger = StructuredLogger("test_main")
        self.test_results = []
        self.performance_metrics = {}
        
    def log_test_result(self, test_name: str, success: bool, duration: float, details: Dict[str, Any] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        result = {
            'test_name': test_name,
            'success': success,
            'duration_ms': round(duration * 1000, 2),
            'timestamp': datetime.now().isoformat(),
            'details': details or {}
        }
        
        self.test_results.append(result)
        self.test_logger.logger.info(f"–†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê: {json.dumps(result, ensure_ascii=False)}")
    
    def create_test_database(self, test_name: str) -> Database:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        test_db_path = f"test_{test_name}_{int(time.time())}.db"
        
        if os.path.exists(test_db_path):
            os.remove(test_db_path)
        
        db = Database(test_db_path)
        db.init_database()
        
        self.test_logger.log_test_step(f"–°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –ë–î: {test_db_path}")
        return db
    
    def cleanup_test_database(self, db: Database):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if os.path.exists(db.db_path):
                os.remove(db.db_path)
                self.test_logger.log_test_step(f"–£–¥–∞–ª–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –ë–î: {db.db_path}")
        except Exception as e:
            self.test_logger.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ë–î: {e}")
    
    def test_database_operations_enhanced(self):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        test_name = "database_operations_enhanced"
        self.test_logger.log_test_start("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
        
        start_time = time.time()
        db = None
        
        try:
            db = self.create_test_database(test_name)
            
            # –¢–µ—Å—Ç 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            self.test_logger.log_test_step("–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            test_users = [
                {
                    'user_id': 1001,
                    'username': 'test_user_1',
                    'first_name': '–ê–Ω–Ω–∞',
                    'email': 'anna@test.com',
                    'timezone': 'Europe/Moscow'
                },
                {
                    'user_id': 1002,
                    'username': 'test_user_2',
                    'first_name': '–ú–∞—Ä–∏—è',
                    'email': 'maria@test.com',
                    'timezone': 'Europe/Moscow'
                },
                {
                    'user_id': 1003,
                    'username': 'test_user_3',
                    'first_name': '–ï–ª–µ–Ω–∞',
                    'email': 'elena@test.com',
                    'timezone': 'Europe/Moscow'
                }
            ]
            
            for user in test_users:
                success = db.add_user(**user)
                self.test_logger.log_assertion(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['user_id']}", success)
                assert success, f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['user_id']}"
            
            # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            self.test_logger.log_test_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            count = db.get_users_count()
            self.test_logger.log_assertion(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π = 3", count == 3, 3, count)
            assert count == 3, f"–û–∂–∏–¥–∞–ª–æ—Å—å 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ª—É—á–µ–Ω–æ {count}"
            
            # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.test_logger.log_test_step("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID")
            user = db.get_user(1001)
            self.test_logger.log_assertion("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω", user is not None)
            assert user is not None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            assert user['first_name'] == '–ê–Ω–Ω–∞', "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            
            # –¢–µ—Å—Ç 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.test_logger.log_test_step("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            db.update_user(1001, training_completed=True, nutrition_marked=True)
            updated_user = db.get_user(1001)
            self.test_logger.log_assertion("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞", updated_user['training_completed'] == True)
            self.test_logger.log_assertion("–ü–∏—Ç–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ", updated_user['nutrition_marked'] == True)
            assert updated_user['training_completed'] == True, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –æ—Ç–º–µ—á–µ–Ω–∞"
            assert updated_user['nutrition_marked'] == True, "–ü–∏—Ç–∞–Ω–∏–µ –Ω–µ –æ—Ç–º–µ—á–µ–Ω–æ"
            
            # –¢–µ—Å—Ç 5: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            self.test_logger.log_test_step("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
            db.add_analytics_event(1001, 'test_event', 'test_data')
            
            # –¢–µ—Å—Ç 6: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            self.test_logger.log_test_step("–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
            perf_start = time.time()
            for i in range(50):
                db.add_user(
                    user_id=2000 + i,
                    username=f'perf_test_{i}',
                    first_name=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å{i}',
                    email=f'user{i}@test.com'
                )
            perf_duration = time.time() - perf_start
            self.performance_metrics['add_users_50'] = perf_duration
            
            duration = time.time() - start_time
            self.log_test_result(test_name, True, duration, {
                'users_added': len(test_users) + 50,
                'performance_ms': round(perf_duration * 1000, 2)
            })
            
        except Exception as e:
            duration = time.time() - start_time
            self.log_test_result(test_name, False, duration, {'error': str(e)})
            raise
        
        finally:
            if db:
                self.cleanup_test_database(db)
    
    def test_callback_handlers_enhanced(self):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-–æ–≤"""
        test_name = "callback_handlers_enhanced"
        self.test_logger.log_test_start("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-–æ–≤")
        
        start_time = time.time()
        db = None
        
        try:
            db = self.create_test_database(test_name)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            test_user_id = 3001
            db.add_user(
                user_id=test_user_id,
                username='callback_tester',
                first_name='–¢–µ—Å—Ç–µ—Ä',
                email='tester@test.com'
            )
            
            callback_handler = CallbackHandlers()
            
            # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —á–µ–∫-–ª–∏—Å—Ç–∞
            callback_tests = [
                ('mark_training', '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞'),
                ('mark_nutrition', '–ü–∏—Ç–∞–Ω–∏–µ'),
                ('mark_water', '–í–æ–¥–∞'),
                ('mark_sleep', '–°–æ–Ω')
            ]
            
            for callback_data, action_name in callback_tests:
                self.test_logger.log_test_step(f"–¢–µ—Å—Ç callback: {action_name}")
                
                # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
                mock_update = MagicMock()
                mock_query = AsyncMock()
                mock_user = MagicMock()
                
                mock_user.id = test_user_id
                mock_query.from_user = mock_user
                mock_query.data = callback_data
                mock_query.edit_message_text = AsyncMock()
                mock_query.delete_message = AsyncMock()
                mock_update.callback_query = mock_query
                
                mock_context = MagicMock()
                mock_context.bot = AsyncMock()
                mock_context.bot.send_message = AsyncMock()
                mock_context.bot.send_photo = AsyncMock()
                
                # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                try:
                    if callback_data == 'mark_training':
                        asyncio.run(callback_handler.handle_mark_training(mock_update, mock_context, callback_data))
                    elif callback_data == 'mark_nutrition':
                        asyncio.run(callback_handler.handle_mark_nutrition(mock_update, mock_context, callback_data))
                    elif callback_data == 'mark_water':
                        asyncio.run(callback_handler.handle_mark_water(mock_update, mock_context, callback_data))
                    elif callback_data == 'mark_sleep':
                        asyncio.run(callback_handler.handle_mark_sleep(mock_update, mock_context, callback_data))
                    
                    self.test_logger.log_assertion(f"Callback {action_name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω", True)
                    
                except Exception as e:
                    self.test_logger.log_assertion(f"Callback {action_name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω", False, None, str(e))
                    raise
            
            # –¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤ —Å–Ω–∞
            self.test_logger.log_test_step("–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤ —Å–Ω–∞")
            sleep_hours = ['sleep_6h', 'sleep_7h', 'sleep_8h', 'sleep_9h']
            
            for sleep_hour in sleep_hours:
                mock_update = MagicMock()
                mock_query = AsyncMock()
                mock_user = MagicMock()
                
                mock_user.id = test_user_id
                mock_query.from_user = mock_user
                mock_query.data = sleep_hour
                mock_query.edit_message_text = AsyncMock()
                mock_query.delete_message = AsyncMock()
                mock_update.callback_query = mock_query
                
                try:
                    asyncio.run(callback_handler.handle_sleep_hours(mock_update, mock_context, sleep_hour))
                    self.test_logger.log_assertion(f"–í—ã–±–æ—Ä —Å–Ω–∞ {sleep_hour} –æ–±—Ä–∞–±–æ—Ç–∞–Ω", True)
                    break  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤—ã–±–æ—Ä
                except Exception as e:
                    self.test_logger.log_assertion(f"–í—ã–±–æ—Ä —Å–Ω–∞ {sleep_hour} –æ–±—Ä–∞–±–æ—Ç–∞–Ω", False, None, str(e))
            
            duration = time.time() - start_time
            self.log_test_result(test_name, True, duration, {
                'callbacks_tested': len(callback_tests),
                'sleep_options_tested': len(sleep_hours)
            })
            
        except Exception as e:
            duration = time.time() - start_time
            self.log_test_result(test_name, False, duration, {'error': str(e)})
            raise
        
        finally:
            if db:
                self.cleanup_test_database(db)
    
    def test_keyboards_enhanced(self):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
        test_name = "keyboards_enhanced"
        self.test_logger.log_test_start("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä")
        
        start_time = time.time()
        
        try:
            # –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            self.test_logger.log_test_step("–¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")
            main_menu = keyboards.main_menu()
            self.test_logger.log_assertion("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–æ", main_menu is not None)
            assert main_menu is not None, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–µ —Å–æ–∑–¥–∞–Ω–æ"
            
            # –¢–µ—Å—Ç —á–µ–∫-–ª–∏—Å—Ç–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
            self.test_logger.log_test_step("–¢–µ—Å—Ç —á–µ–∫-–ª–∏—Å—Ç–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏")
            test_states = [
                {
                    'name': '–í—Å–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
                    'data': {
                        'training_completed': False,
                        'nutrition_marked': False,
                        'water_marked': False,
                        'sleep_marked': False
                    }
                },
                {
                    'name': '–í—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
                    'data': {
                        'training_completed': True,
                        'nutrition_marked': True,
                        'water_marked': True,
                        'sleep_marked': True
                    }
                },
                {
                    'name': '–ß–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
                    'data': {
                        'training_completed': True,
                        'nutrition_marked': False,
                        'water_marked': True,
                        'sleep_marked': False
                    }
                }
            ]
            
            for state in test_states:
                checklist_menu = keyboards.checklist_menu(state['data'])
                self.test_logger.log_assertion(f"–ß–µ–∫-–ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {state['name']}", checklist_menu is not None)
                assert checklist_menu is not None, f"–ß–µ–∫-–ª–∏—Å—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {state['name']}"
            
            # –¢–µ—Å—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤ —Å–Ω–∞
            self.test_logger.log_test_step("–¢–µ—Å—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤ —Å–Ω–∞")
            sleep_menu = keyboards.sleep_hours_menu()
            self.test_logger.log_assertion("–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤ —Å–Ω–∞ —Å–æ–∑–¥–∞–Ω–æ", sleep_menu is not None)
            assert sleep_menu is not None, "–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤ —Å–Ω–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ"
            
            duration = time.time() - start_time
            self.log_test_result(test_name, True, duration, {
                'keyboard_types_tested': len(test_states) + 2,
                'states_tested': len(test_states)
            })
            
        except Exception as e:
            duration = time.time() - start_time
            self.log_test_result(test_name, False, duration, {'error': str(e)})
            raise
    
    def test_health_tips_enhanced(self):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é"""
        test_name = "health_tips_enhanced"
        self.test_logger.log_test_start("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é")
        
        start_time = time.time()
        
        try:
            test_user_ids = [4001, 4002, 4003]
            tip_types = ['water', 'breakfast', 'dinner', 'sleep']
            
            for user_id in test_user_ids:
                self.test_logger.log_test_step(f"–¢–µ—Å—Ç —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                for tip_type in tip_types:
                    if tip_type == 'water':
                        tip = health_tips.get_water_tip(user_id)
                    elif tip_type == 'breakfast':
                        tip = health_tips.get_breakfast_tip(user_id)
                    elif tip_type == 'dinner':
                        tip = health_tips.get_dinner_tip(user_id)
                    elif tip_type == 'sleep':
                        tip = health_tips.get_sleep_tip(user_id)
                    
                    self.test_logger.log_assertion(
                        f"–°–æ–≤–µ—Ç {tip_type} –ø–æ–ª—É—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
                        tip is not None and len(tip) > 0,
                        "–ù–µ–ø—É—Å—Ç–æ–π —Å–æ–≤–µ—Ç",
                        tip[:50] + "..." if tip else None
                    )
                    assert tip is not None, f"–°–æ–≤–µ—Ç {tip_type} –Ω–µ –ø–æ–ª—É—á–µ–Ω"
                    assert len(tip) > 0, f"–°–æ–≤–µ—Ç {tip_type} –ø—É—Å—Ç–æ–π"
            
            # –¢–µ—Å—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è —Å–æ–≤–µ—Ç–æ–≤
            self.test_logger.log_test_step("–¢–µ—Å—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è —Å–æ–≤–µ—Ç–æ–≤")
            user_id = 5001
            water_tips = []
            for i in range(5):
                tip = health_tips.get_water_tip(user_id)
                water_tips.append(tip)
            
            unique_tips = len(set(water_tips))
            self.test_logger.log_assertion(
                "–°–æ–≤–µ—Ç—ã –ø–æ –≤–æ–¥–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã",
                unique_tips > 1,
                1,
                unique_tips
            )
            
            duration = time.time() - start_time
            self.log_test_result(test_name, True, duration, {
                'users_tested': len(test_user_ids),
                'tip_types_tested': len(tip_types),
                'diversity_test_passed': unique_tips > 1
            })
            
        except Exception as e:
            duration = time.time() - start_time
            self.log_test_result(test_name, False, duration, {'error': str(e)})
            raise
    
    def test_performance_enhanced(self):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        test_name = "performance_enhanced"
        self.test_logger.log_test_start("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        
        start_time = time.time()
        db = None
        
        try:
            db = self.create_test_database(test_name)
            
            # –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            self.test_logger.log_test_step("–¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            batch_sizes = [10, 50, 100]
            
            for batch_size in batch_sizes:
                batch_start = time.time()
                
                for i in range(batch_size):
                    db.add_user(
                        user_id=10000 + i,
                        username=f'perf_test_{i}',
                        first_name=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å{i}',
                        email=f'user{i}@test.com'
                    )
                
                batch_duration = time.time() - batch_start
                self.performance_metrics[f'add_users_{batch_size}'] = batch_duration
                
                self.test_logger.log_assertion(
                    f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ {batch_size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è",
                    batch_duration < 10.0,
                    10.0,
                    batch_duration
                )
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            self.test_logger.log_test_step("–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            get_start = time.time()
            users = db.get_all_users()
            get_duration = time.time() - get_start
            self.performance_metrics['get_all_users'] = get_duration
            
            self.test_logger.log_assertion(
                "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è",
                get_duration < 2.0,
                2.0,
                get_duration
            )
            
            # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.test_logger.log_test_step("–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            search_start = time.time()
            user = db.get_user(10000)
            search_duration = time.time() - search_start
            self.performance_metrics['search_user'] = search_duration
            
            self.test_logger.log_assertion(
                "–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è",
                search_duration < 0.1,
                0.1,
                search_duration
            )
            
            duration = time.time() - start_time
            self.log_test_result(test_name, True, duration, {
                'batch_sizes_tested': batch_sizes,
                'total_users': len(users),
                'performance_metrics': self.performance_metrics
            })
            
        except Exception as e:
            duration = time.time() - start_time
            self.log_test_result(test_name, False, duration, {'error': str(e)})
            raise
        
        finally:
            if db:
                self.cleanup_test_database(db)
    
    def test_error_handling_enhanced(self):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        test_name = "error_handling_enhanced"
        self.test_logger.log_test_start("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")
        
        start_time = time.time()
        db = None
        
        try:
            db = self.create_test_database(test_name)
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.test_logger.log_test_step("–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            non_existent_user = db.get_user(99999)
            self.test_logger.log_assertion(
                "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None",
                non_existent_user is None,
                None,
                non_existent_user
            )
            assert non_existent_user is None, "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å None"
            
            # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.test_logger.log_test_step("–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            try:
                result = db.update_user(99999, training_completed=True)
                self.test_logger.log_assertion("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É", True)
            except Exception as e:
                self.test_logger.log_assertion("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É", False, None, str(e))
            
            # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            self.test_logger.log_test_step("–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
            try:
                result = db.add_user(user_id=None)
                self.test_logger.log_assertion("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å None ID –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", True)
            except Exception as e:
                self.test_logger.log_assertion("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å None ID –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", True, None, str(e))
            
            # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º—Å—è ID
            self.test_logger.log_test_step("–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º—Å—è ID")
            db.add_user(user_id=8001, username='test1', first_name='Test1', email='test1@test.com')
            
            try:
                db.add_user(user_id=8001, username='test2', first_name='Test2', email='test2@test.com')
                user = db.get_user(8001)
                self.test_logger.log_assertion(
                    "–î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è ID –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                    user['first_name'] == 'Test2',
                    'Test2',
                    user['first_name']
                )
            except Exception as e:
                self.test_logger.log_assertion("–î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è ID –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", False, None, str(e))
            
            duration = time.time() - start_time
            self.log_test_result(test_name, True, duration, {
                'error_scenarios_tested': 4
            })
            
        except Exception as e:
            duration = time.time() - start_time
            self.log_test_result(test_name, False, duration, {'error': str(e)})
            raise
        
        finally:
            if db:
                self.cleanup_test_database(db)
    
    def generate_test_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∞—Ö"""
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results if result['success'])
        failed_tests = total_tests - passed_tests
        
        total_duration = sum(result['duration_ms'] for result in self.test_results)
        avg_duration = total_duration / total_tests if total_tests > 0 else 0
        
        report = {
            'summary': {
                'total_tests': total_tests,
                'passed_tests': passed_tests,
                'failed_tests': failed_tests,
                'success_rate': round((passed_tests / total_tests) * 100, 2) if total_tests > 0 else 0,
                'total_duration_ms': round(total_duration, 2),
                'average_duration_ms': round(avg_duration, 2)
            },
            'performance_metrics': self.performance_metrics,
            'test_results': self.test_results,
            'timestamp': datetime.now().isoformat()
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        with open('logs/test_report.json', 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
        self.test_logger.logger.info(f"=== –°–í–û–î–ö–ê –¢–ï–°–¢–û–í ===")
        self.test_logger.logger.info(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        self.test_logger.logger.info(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        self.test_logger.logger.info(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        self.test_logger.logger.info(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {report['summary']['success_rate']}%")
        self.test_logger.logger.info(f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {report['summary']['total_duration_ms']}–º—Å")
        
        return report
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        self.test_logger.logger.info("=== –ó–ê–ü–£–°–ö –£–õ–£–ß–®–ï–ù–ù–´–• –¢–ï–°–¢–û–í ===")
        
        test_methods = [
            self.test_database_operations_enhanced,
            self.test_callback_handlers_enhanced,
            self.test_keyboards_enhanced,
            self.test_health_tips_enhanced,
            self.test_performance_enhanced,
            self.test_error_handling_enhanced
        ]
        
        for test_method in test_methods:
            try:
                test_method()
            except Exception as e:
                self.test_logger.logger.error(f"–¢–µ—Å—Ç {test_method.__name__} –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = self.generate_test_report()
        
        self.test_logger.logger.info("=== –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ ===")
        return report

def run_enhanced_tests():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    test_suite = EnhancedTestSuite()
    return test_suite.run_all_tests()

if __name__ == "__main__":
    run_enhanced_tests()
