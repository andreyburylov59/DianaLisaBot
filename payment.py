"""
üí≥ –°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è –±–æ—Ç–∞ DianaLisa
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Payments –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
"""

import logging
import uuid
from datetime import datetime, timedelta
from telegram import Update, LabeledPrice, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from config import PAYMENT_PROVIDER_TOKEN, CURRENCY, MESSAGES
from keyboards import keyboards
from database import db

logger = logging.getLogger(__name__)

class PaymentSystem:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞–º–∏"""
    
    def __init__(self):
        self.payment_provider_token = PAYMENT_PROVIDER_TOKEN
        self.currency = CURRENCY
        
        # –ü–∞–∫–µ—Ç—ã –∫—É—Ä—Å–æ–≤
        self.course_packages = {
            'basic': {
                'name': 'üíé –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫—É—Ä—Å',
                'description': '28 –¥–Ω–µ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
                'price': 1990,
                'features': [
                    '28 –¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
                    '12 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (3 –≤ –Ω–µ–¥–µ–ª—é)',
                    '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–∏—Ç–∞–Ω–∏—è',
                    '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–∞',
                    '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞',
                    '–ú–æ—Ç–∏–≤–∞—Ü–∏—è –∏ —Å–æ–≤–µ—Ç—ã 24/7',
                    '–î–æ—Å—Ç—É–ø 40 –¥–Ω–µ–π'
                ]
            }
        }
        
        # –ü–∞–∫–µ—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        self.training_packages = {
            'single': {
                'name': 'üíª 1 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
                'description': '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º',
                'price': 500,
                'features': [
                    '1 —á–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
                    '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥',
                    '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ç–µ—Ö–Ω–∏–∫–∏'
                ]
            },
            'pack5': {
                'name': 'üìÖ 5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
                'description': '–ü–∞–∫–µ—Ç –∏–∑ 5 –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
                'price': 2000,
                'features': [
                    '5 –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
                    '–°–∫–∏–¥–∫–∞ 20%',
                    '–ì–∏–±–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
                    '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥'
                ]
            },
            'pack10': {
                'name': 'üèãÔ∏è‚Äç‚ôÄÔ∏è 10 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
                'description': '–ü–∞–∫–µ—Ç –∏–∑ 10 –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
                'price': 3500,
                'features': [
                    '10 –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
                    '–°–∫–∏–¥–∫–∞ 30%',
                    '–ì–∏–±–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
                    '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥',
                    '–ë–æ–Ω—É—Å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏'
                ]
            },
            'unlimited': {
                'name': 'üî• –ë–µ–∑–ª–∏–º–∏—Ç –Ω–∞ –º–µ—Å—è—Ü',
                'description': '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –º–µ—Å—è—Ü',
                'price': 5000,
                'features': [
                    '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
                    '–ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è',
                    '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
                    '–ì–∏–±–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
                    '–í—Å–µ –±–æ–Ω—É—Å—ã'
                ]
            }
        }
    
    async def create_payment_invoice(self, query, package_type: str, payment_type: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
        try:
            user_id = query.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–∫–µ—Ç–µ
            if payment_type == 'course':
                package_info = self.course_packages.get(package_type)
            elif payment_type == 'training':
                package_info = self.training_packages.get(package_type)
            else:
                await query.edit_message_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞.",
                    reply_markup=keyboards.back_to_main()
                )
                return
            
            if not package_info:
                await query.edit_message_text(
                    "‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=keyboards.back_to_main()
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transaction_id = f"{payment_type}_{package_type}_{user_id}_{uuid.uuid4().hex[:8]}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            description = f"{package_info['name']}\n\n{package_info['description']}\n\n"
            description += "–í–∫–ª—é—á–∞–µ—Ç:\n"
            for feature in package_info['features']:
                description += f"‚Ä¢ {feature}\n"
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å
            prices = [LabeledPrice(package_info['name'], package_info['price'] * 100)]  # –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
            
            await query.bot.send_invoice(
                chat_id=user_id,
                title=package_info['name'],
                description=description,
                payload=transaction_id,
                provider_token=self.payment_provider_token,
                currency=self.currency,
                prices=prices,
                reply_markup=self.get_payment_keyboard(transaction_id)
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            db.add_analytics_event(user_id, 'payment_invoice_created', f"{payment_type}_{package_type}")
            
            logger.info(f"–ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {transaction_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=keyboards.back_to_main()
            )
    
    def get_payment_keyboard(self, transaction_id: str) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞"""
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", pay=True)],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_payment')]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    async def handle_pre_checkout(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            query = update.pre_checkout_query
            user_id = query.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–∞
            if self.validate_payment(query.invoice_payload):
                await query.answer(ok=True)
                logger.info(f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ: {query.invoice_payload}")
            else:
                await query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞")
                logger.warning(f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –ø—Ä–æ—à–ª–∞: {query.invoice_payload}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            await query.answer(ok=False, error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞")
    
    async def handle_successful_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            message = update.message
            user_id = message.from_user.id
            payment = message.successful_payment
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
            transaction_id = payment.invoice_payload
            amount = payment.total_amount / 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –∫–æ–ø–µ–µ–∫
            currency = payment.currency
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞ –∏ –ø–∞–∫–µ—Ç
            payment_type, package_type = self.parse_transaction_id(transaction_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            success = db.add_payment(
                user_id=user_id,
                amount=amount,
                currency=currency,
                payment_type=payment_type,
                status='completed',
                transaction_id=transaction_id
            )
            
            if success:
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —É—Å–ª—É–≥–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await self.activate_user_services(user_id, payment_type, package_type)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                await self.send_payment_confirmation(message, payment_type, package_type)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
                db.add_analytics_event(user_id, 'payment_completed', f"{payment_type}_{package_type}")
                
                logger.info(f"–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {transaction_id}")
            else:
                await message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    reply_markup=keyboards.back_to_main()
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            await message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=keyboards.back_to_main()
            )
    
    def validate_payment(self, transaction_id: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç transaction_id
            parts = transaction_id.split('_')
            if len(parts) != 4:
                return False
            
            payment_type, package_type, user_id, random_part = parts
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–ø—ã –ø–ª–∞—Ç–µ–∂–µ–π –≤–∞–ª–∏–¥–Ω—ã
            if payment_type not in ['course', 'training']:
                return False
            
            if payment_type == 'course' and package_type not in self.course_packages:
                return False
            
            if payment_type == 'training' and package_type not in self.training_packages:
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return False
    
    def parse_transaction_id(self, transaction_id: str) -> tuple:
        """–ü–∞—Ä—Å–∏–Ω–≥ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            parts = transaction_id.split('_')
            payment_type = parts[0]
            package_type = parts[1]
            return payment_type, package_type
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            return None, None
    
    async def activate_user_services(self, user_id: int, payment_type: str, package_type: str):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —É—Å–ª—É–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user = db.get_user(user_id)
            if not user:
                return
            
            if payment_type == 'course':
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø
                premium_expires = datetime.now() + timedelta(days=30)
                db.update_user(user_id, 
                             is_premium=True, 
                             premium_expires=premium_expires)
                
                logger.info(f"–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
            elif payment_type == 'training':
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∫ –±–∞–ª–∞–Ω—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                training_count = self.get_training_count(package_type)
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                
                logger.info(f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {training_count}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É—Å–ª—É–≥: {e}")
    
    def get_training_count(self, package_type: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –ø–∞–∫–µ—Ç–µ"""
        training_counts = {
            'single': 1,
            'pack5': 5,
            'pack10': 10,
            'unlimited': -1  # –ë–µ–∑–ª–∏–º–∏—Ç
        }
        return training_counts.get(package_type, 0)
    
    async def send_payment_confirmation(self, message, payment_type: str, package_type: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            if payment_type == 'course':
                package_info = self.course_packages.get(package_type)
            else:
                package_info = self.training_packages.get(package_type)
            
            if not package_info:
                return
            
            confirmation_text = f"""
{MESSAGES['payment_success']}

üì¶ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–∞–∫–µ—Ç: {package_info['name']}

‚ú® –ß—Ç–æ –¥–∞–ª—å—à–µ:
‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Ç–≤–æ–π email
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É —á–∞—Ç—É –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å

üí™ –ì–æ—Ç–æ–≤–∞ –∫ –Ω–æ–≤—ã–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º?
            """
            
            await message.reply_text(
                confirmation_text,
                reply_markup=keyboards.main_menu(),
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
    
    async def handle_payment_cancellation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            query = update.callback_query
            user_id = query.from_user.id
            
            await query.edit_message_text(
                "‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
                reply_markup=keyboards.main_menu()
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            db.add_analytics_event(user_id, 'payment_cancelled')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞: {e}")
    
    def get_payment_statistics(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
        try:
            with db.connection() as conn:
                cursor = conn.cursor()
                
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                cursor.execute('''
                    SELECT 
                        COUNT(*) as total_payments,
                        SUM(amount) as total_amount,
                        AVG(amount) as average_amount
                    FROM payments 
                    WHERE status = 'completed'
                ''')
                total_stats = cursor.fetchone()
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
                cursor.execute('''
                    SELECT 
                        payment_type,
                        COUNT(*) as count,
                        SUM(amount) as total_amount
                    FROM payments 
                    WHERE status = 'completed'
                    GROUP BY payment_type
                ''')
                type_stats = cursor.fetchall()
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
                cursor.execute('''
                    SELECT 
                        DATE(created_at) as date,
                        COUNT(*) as count,
                        SUM(amount) as total_amount
                    FROM payments 
                    WHERE status = 'completed'
                    GROUP BY DATE(created_at)
                    ORDER BY date DESC
                    LIMIT 30
                ''')
                daily_stats = cursor.fetchall()
                
                return {
                    'total': {
                        'payments': total_stats[0] or 0,
                        'amount': total_stats[1] or 0,
                        'average': total_stats[2] or 0
                    },
                    'by_type': [
                        {'type': row[0], 'count': row[1], 'amount': row[2]}
                        for row in type_stats
                    ],
                    'daily': [
                        {'date': row[0], 'count': row[1], 'amount': row[2]}
                        for row in daily_stats
                    ]
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            return {}
    
    async def process_refund(self, user_id: int, transaction_id: str, reason: str = None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—á–∞–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            
            db.add_payment(
                user_id=user_id,
                amount=0,  # –í–æ–∑–≤—Ä–∞—Ç
                currency=CURRENCY,
                payment_type='refund',
                status='refunded',
                transaction_id=f"refund_{transaction_id}"
            )
            
            logger.info(f"–í–æ–∑–≤—Ä–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {transaction_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞—Ç–µ–∂–µ–π
payment_system = PaymentSystem()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å callbacks.py
async def create_payment_invoice(query, package_type: str, payment_type: str):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    await payment_system.create_payment_invoice(query, package_type, payment_type)
