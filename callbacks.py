"""
üîÑ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ callback-–æ–≤ –¥–ª—è –±–æ—Ç–∞ DianaLisa
–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import logging
import traceback
from datetime import datetime
from enhanced_logger import get_logger
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from config import MESSAGES, BUTTONS, ADMIN_IDS, IMAGES
from keyboards import keyboards
from database import db
from admin import AdminPanel
from utils import get_user_timezone, send_motivational_message
from training import send_training_content
from payment import create_payment_invoice
from admin import handle_admin_actions

# –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è callbacks
callback_logger = logging.getLogger('callbacks')
callback_logger.setLevel(logging.DEBUG)

# –£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
# from validation import error_handler, ValidationError  # –ú–æ–¥—É–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

logger = logging.getLogger(__name__)
enhanced_logger = get_logger("callbacks")

class CallbackHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫"""
    
    def __init__(self):
        self.handlers = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            'main_menu': self.handle_main_menu,
            'skip_phone': self.handle_skip_phone,
            'start_training': self.handle_start_training,
            'faq': self.handle_faq,
            'full_course': self.handle_full_course,
            'online_training': self.handle_online_training,
            'contact_support': self.handle_contact_support,
            
            # –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            'training_day_1': self.handle_training_day_1,
            'training_day_2': self.handle_training_day_2,
            'training_day_3': self.handle_training_day_3,
            
            # –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            'mark_training': self.handle_mark_training,
            
            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º
            'feedback_like_1': self.handle_feedback_like,
            'feedback_like_2': self.handle_feedback_like,
            'feedback_like_3': self.handle_feedback_like,
            'feedback_dislike_1': self.handle_feedback_dislike,
            'feedback_dislike_2': self.handle_feedback_dislike,
            'feedback_dislike_3': self.handle_feedback_dislike,
            
            # –û—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (—É–±—Ä–∞–Ω–æ - —Ç–µ–ø–µ—Ä—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            # 'feedback_training_': self.handle_training_feedback,
            'difficulty_1_': self.handle_difficulty_rating,
            'difficulty_2_': self.handle_difficulty_rating,
            'difficulty_3_': self.handle_difficulty_rating,
            'difficulty_4_': self.handle_difficulty_rating,
            'difficulty_5_': self.handle_difficulty_rating,
            'clarity_1_': self.handle_clarity_rating,
            'clarity_2_': self.handle_clarity_rating,
            'clarity_3_': self.handle_clarity_rating,
            'clarity_4_': self.handle_clarity_rating,
            'clarity_5_': self.handle_clarity_rating,
            'finish_feedback_': self.handle_finish_feedback,
            'training_feedback_': self.handle_training_feedback,
            'skip_feedback': self.handle_skip_feedback,
            'view_results': self.handle_view_results,
            
            # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
            'timezone_': self.handle_timezone_selection,
            
            # –û–ø–ª–∞—Ç–∞
            'buy_course': self.handle_buy_course,
            'buy_training': self.handle_buy_training,
            'package_': self.handle_package_selection,
            'training_': self.handle_training_selection,
            
            # –ê–¥–º–∏–Ω–∫–∞
            'admin_': self.handle_admin_action,
            'admin_stats': self.handle_admin_stats,
            'admin_users': self.handle_admin_users,
            'admin_payments': self.handle_admin_payments,
            'admin_reviews': self.handle_admin_reviews,
            'admin_training_feedback': self.handle_admin_training_feedback,
            'admin_analytics': self.handle_admin_analytics,
            'admin_export_db': self.handle_admin_export_db,
            'admin_send_message': self.handle_admin_send_message,
            'admin_menu': self.handle_admin_menu,
            'admin_clear_db': self.handle_admin_clear_db,
            'confirm_broadcast': self.handle_confirm_broadcast,
            'cancel_broadcast': self.handle_cancel_broadcast,
            'confirm_clear_db': self.handle_confirm_clear_db,
            'admin_confirm_clear_db': self.handle_confirm_clear_db,
            'admin_panel': self.handle_admin_action,
            
            # –†–µ–π—Ç–∏–Ω–≥
            'rating_': self.handle_rating,
            'rating_1': self.handle_rating_1,
            'rating_2': self.handle_rating_2,
            'rating_3': self.handle_rating_3,
            'rating_4': self.handle_rating_4,
            'rating_5': self.handle_rating_5,
            
            # –ß–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞
            'timezone_': self.handle_timezone_selection,
            'timezone_Europe/Moscow': self.handle_timezone_moscow,
            'timezone_Europe/Kiev': self.handle_timezone_kiev,
            'timezone_Europe/Minsk': self.handle_timezone_minsk,
            'timezone_Asia/Almaty': self.handle_timezone_almaty,
            'timezone_America/New_York': self.handle_timezone_new_york,
            'timezone_Europe/London': self.handle_timezone_london,
            'timezone_Europe/Berlin': self.handle_timezone_berlin,
            'timezone_Europe/Paris': self.handle_timezone_paris,
            'timezone_Asia/Tokyo': self.handle_timezone_tokyo,
            'timezone_Australia/Sydney': self.handle_timezone_sydney,
            
            # –ü–∞–∫–µ—Ç—ã
            'package_basic': self.handle_package_basic,
            'payment_success': self.handle_payment_success,
            'payment_cancel': self.handle_payment_cancel,
            
            # –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            'training_single': self.handle_training_single,
            'training_pack5': self.handle_training_pack5,
            'training_pack10': self.handle_training_pack10,
            'training_unlimited': self.handle_training_unlimited,
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            'start_registration': self.handle_start_registration,
            'back_to_registration_start': self.handle_back_to_registration_start,
            
            # –û—Ç–∑—ã–≤—ã
            'leave_review': self.handle_leave_review,
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            'yes': self.handle_yes,
            'no': self.handle_no,
            'confirm_': self.handle_confirm,
            'cancel_action': self.handle_cancel,
            
            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            '_page_': self.handle_pagination,
            
            # –ó–∞–≥–ª—É—à–∫–∞
            'noop': self.handle_noop
        }
    
    async def process_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        callback_data = query.data
        user_id = query.from_user.id
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: {callback_data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        db.add_analytics_event(user_id, 'button_click', callback_data)
        
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        handler = None
        for pattern, handler_func in self.handlers.items():
            if callback_data.startswith(pattern):
                handler = handler_func
                break
        
        if handler:
            try:
                await handler(update, context, callback_data)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback {callback_data}: {e}")
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≤–º–µ—Å—Ç–æ edit_message_text
                try:
                    await query.delete_message()
                except:
                    pass
                
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=keyboards.back_to_main()
                )
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {callback_data}")
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≤–º–µ—Å—Ç–æ edit_message_text
            try:
                await query.delete_message()
            except:
                pass
            
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=keyboards.main_menu()
            )
    
    # ============================================================================
    # –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ò –ù–ê–í–ò–ì–ê–¶–ò–Ø
    # ============================================================================
    
    async def handle_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        query = update.callback_query
        user_id = query.from_user.id
        
        try:
            logger.info(f"[MAIN_MENU] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            user = db.get_user(user_id)
            logger.info(f"[MAIN_MENU] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω: {user is not None}")
            
            enhanced_logger.log_user_action(user_id, 'main_menu_clicked')
            logger.info(f"[MAIN_MENU] –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            logger.info(f"[MAIN_MENU] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
            try:
                from registration import registration_handler
                in_registration = user_id in registration_handler.registration_states
            except Exception as reg_error:
                logger.error(f"[MAIN_MENU] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_error}")
                in_registration = False
            
            if in_registration:
                logger.info(f"[MAIN_MENU] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
                state = registration_handler.registration_states[user_id]
                if state['step'] == 'email':
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    try:
                        await query.delete_message()
                    except:
                        pass
                    
                    await context.bot.send_message(
                        chat_id=user_id,
                        text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –í–≤–µ–¥–∏—Ç–µ email:",
                        reply_markup=keyboards.email_input_keyboard()
                    )
                    return
                elif state['step'] == 'timezone':
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    try:
                        await query.delete_message()
                    except:
                        pass
                    
                    await context.bot.send_message(
                        chat_id=user_id,
                        text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:",
                        reply_markup=keyboards.timezone_menu()
                    )
                    return
            
            logger.info(f"[MAIN_MENU] –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è")
            if user:
                from utils import format_course_progress_bar, get_user_status_text
                
                current_day = user.get('current_day', 1)
                progress_bar = format_course_progress_bar(current_day)
                status_text = get_user_status_text(user)
                
                
                welcome_text = f"""
üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!</b>

üëã –ü—Ä–∏–≤–µ—Ç, {user['first_name']}!

üí™ –†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π —Å–≤–æ–π –ø—É—Ç—å –∫ –∑–¥–æ—Ä–æ–≤–æ–º—É –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏!

{progress_bar}
{status_text}

üèãÔ∏è‚Äç‚ôÄÔ∏è –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:
                """
                enhanced_logger.log_user_action(user_id, 'welcome_back_message')
            else:
                welcome_text = f"""
üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DianaLisa Bot, {query.from_user.first_name}!</b>

üí™ –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –ø—É—Ç–∏ –∫ —Å—Ç—Ä–æ–π–Ω–æ–º—É —Ç–µ–ª—É!

üéØ <b>–ß—Ç–æ —Ç–µ–±—è –∂–¥–µ—Ç:</b>
‚Ä¢ 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

üöÄ –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Ç–≤–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∂–µ–Ω–∏–µ!
                """
                enhanced_logger.log_user_action(user_id, 'welcome_new_message')
            
            logger.info(f"[MAIN_MENU] –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            try:
                await query.delete_message()
                enhanced_logger.log_user_action(user_id, 'message_deleted')
                logger.info(f"[MAIN_MENU] –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
            except Exception as e:
                logger.error(f"[MAIN_MENU] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                enhanced_logger.log_error(e, {'user_id': user_id, 'action': 'delete_message'})
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
            logger.info(f"[MAIN_MENU] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º")
            try:
                from utils import send_image_with_text
                enhanced_logger.log_user_action(user_id, 'sending_welcome_image')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
                from config import ADMIN_IDS
                is_admin = user_id in ADMIN_IDS
                
                # –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                menu_keyboard = keyboards.admin_main_menu() if is_admin else keyboards.main_menu()
                logger.info(f"[MAIN_MENU] –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞, is_admin={is_admin}")
                
                await send_image_with_text(
                    bot=context.bot,
                    chat_id=user_id,
                    image_path="DianaLisa1.jpg",
                    text=welcome_text,
                    reply_markup=menu_keyboard,
                    parse_mode=ParseMode.HTML
                )
                enhanced_logger.log_user_action(user_id, 'welcome_image_sent')
                logger.info(f"[MAIN_MENU] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                logger.error(f"[MAIN_MENU] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                enhanced_logger.log_error(e, {'user_id': user_id, 'action': 'send_welcome_image'})
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                try:
                    from config import ADMIN_IDS
                    is_admin = user_id in ADMIN_IDS
                    menu_keyboard = keyboards.admin_main_menu() if is_admin else keyboards.main_menu()
                    
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=welcome_text,
                        reply_markup=menu_keyboard,
                        parse_mode=ParseMode.HTML
                    )
                    logger.info(f"[MAIN_MENU] Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                except Exception as fallback_error:
                    logger.error(f"[MAIN_MENU] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ fallback: {fallback_error}")
                    
        except Exception as e:
            logger.error(f"[MAIN_MENU] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_main_menu: {e}")
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text="üåü –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    reply_markup=keyboards.main_menu()
                )
            except Exception as final_error:
                logger.error(f"[MAIN_MENU] –§–∏–Ω–∞–ª—å–Ω—ã–π fallback –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: {final_error}")
    
    async def handle_skip_phone(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        query = update.callback_query
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        from registration import registration_handler
        if user_id in registration_handler.registration_states:
            state = registration_handler.registration_states[user_id]
            if state['step'] == 'phone':
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                registration_handler.registration_states[user_id]['phone'] = None
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
                try:
                    await query.delete_message()
                except:
                    pass
                
                # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                await registration_handler.complete_registration(update, context, user_id)
                return
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await self.handle_main_menu(update, context, callback_data)
    
    # ============================================================================
    # –¢–†–ï–ù–ò–†–û–í–ö–ò
    # ============================================================================
    
    async def handle_start_training(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        query = update.callback_query
        user_id = query.from_user.id
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ start_training –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        user = db.get_user(user_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–π–¥–µ–Ω –≤ –ë–î: {user is not None}")
        
        if not user:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î!")
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await query.delete_message()
            except:
                pass
            
            await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
                reply_markup=keyboards.back_to_main()
            )
            return
        
        current_day = user['current_day']
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        try:
            await query.delete_message()
        except:
            pass
        
        training_text = f"""<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É</b>

–í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: <b>–î–µ–Ω—å {current_day}</b>

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:
üèãÔ∏è‚Äç‚ôÄÔ∏è <b>–î–µ–Ω—å 1</b> - –ë–∞–∑–æ–≤–∞—è —Ä–∞–∑–º–∏–Ω–∫–∞ (25 –º–∏–Ω—É—Ç) - ‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞
{'üèãÔ∏è‚Äç‚ôÄÔ∏è <b>–î–µ–Ω—å 2</b> - –°–∏–ª–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (30 –º–∏–Ω—É—Ç) - ‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞' if current_day >= 2 else 'üîí <b>–î–µ–Ω—å 2</b> - –°–∏–ª–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (30 –º–∏–Ω—É—Ç) - ‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞'}
{'üèãÔ∏è‚Äç‚ôÄÔ∏è <b>–î–µ–Ω—å 3</b> - –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (35 –º–∏–Ω—É—Ç) - ‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞' if current_day >= 3 else 'üîí <b>–î–µ–Ω—å 3</b> - –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (35 –º–∏–Ω—É—Ç) - ‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞'}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –º–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        from utils import send_image_with_text
        await send_image_with_text(
            bot=context.bot,
            chat_id=user_id,
            image_path="DianaLisa2.jpg",
            text=training_text,
            reply_markup=keyboards.training_menu(current_day),
            parse_mode=ParseMode.HTML
        )
    
    async def handle_faq(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ FAQ"""
        query = update.callback_query
        user_id = query.from_user.id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º FAQ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        faq_text = MESSAGES['faq']
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        try:
            await query.delete_message()
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å FAQ
        from utils import send_image_with_text
        await send_image_with_text(
            bot=context.bot,
            chat_id=user_id,
            image_path="DianaLisa2.jpg",
            text=faq_text,
            reply_markup=keyboards.back_to_main(),
            parse_mode=ParseMode.HTML
        )
    
    async def handle_full_course(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª–Ω–æ–≥–æ –∫—É—Ä—Å–∞"""
        query = update.callback_query
        user_id = query.from_user.id
        
        course_text = """
üíé –ü–û–õ–ù–´–ô –ö–£–†–° DIANALISA

üéØ –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:
‚Ä¢ 30 –¥–Ω–µ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
‚Ä¢ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –º–µ—Å—è—Ü
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É —á–∞—Ç—É
‚Ä¢ –ë–æ–Ω—É—Å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

üìû –ó–∞–ø–∏—Å—å –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: @Dianalisa5

üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç:
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞—Ö —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        course_text = """
üåü <b>–ü–æ–ª–Ω—ã–π –∫—É—Ä—Å —Å DianaLisa</b>

üí™ <b>–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –∫—É—Ä—Å:</b>
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 28 –¥–Ω–µ–π 
‚Ä¢ 12 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (3 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é)
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–∏—Ç–∞–Ω–∏—è
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–∞
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏—è –∏ —Å–æ–≤–µ—Ç—ã 24/7
‚Ä¢ –î–æ—Å—Ç—É–ø 40 –¥–Ω–µ–π

üéØ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
‚Ä¢ –ü–æ—Ö—É–¥–µ–Ω–∏–µ –Ω–∞ 5-10 –∫–≥ –∑–∞ –º–µ—Å—è—Ü
‚Ä¢ –£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –º—ã—à—Ü
‚Ä¢ –°—Ç—Ä–æ–π–Ω–æ–µ —Ç–µ–ª–æ
‚Ä¢ –ó–¥–æ—Ä–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ 

üìû –ó–∞–ø–∏—Å—å –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∫—É—Ä—Å–∞: @Dianalisa5

üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å:
        """
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        try:
            await query.delete_message()
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫—É—Ä—Å–∞—Ö
        from utils import send_image_with_text
        await send_image_with_text(
            bot=context.bot,
            chat_id=user_id,
            image_path="DianaLisa2.jpg",
            text=course_text,
            reply_markup=keyboards.course_packages(),
            parse_mode=ParseMode.HTML
        )
    
    async def handle_online_training(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –æ–Ω–ª–∞–π–Ω-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        query = update.callback_query
        user_id = query.from_user.id
        
        training_text = """
üíª –û–ù–õ–ê–ô–ù-–¢–†–ï–ù–ò–†–û–í–ö–ò

üèãÔ∏è‚Äç‚ôÄÔ∏è –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º
‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ç–µ—Ö–Ω–∏–∫–∏
‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –ì–∏–±–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ

üè¢ –û–§–õ–ê–ô–ù-–¢–†–ï–ù–ò–†–û–í–ö–ò –í –ü–ï–†–ú–ò
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∑–∞–ª–µ
‚Ä¢ –ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è
‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥

üìû –ó–∞–ø–∏—Å—å –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: @Dianalisa5

üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç:
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        training_text = """
üåü <b>–û–Ω–ª–∞–π–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å DianaLisa</b>

üí™ <b>–ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:</b>
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ–Ω–ª–∞–π–Ω
‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–∞ 24/7
‚Ä¢ –ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫ –∑–∞–Ω—è—Ç–∏–π
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é!

üè† <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –æ–Ω–ª–∞–π–Ω:</b>
‚Ä¢ –¢—Ä–µ–Ω–∏—Ä—É–π—Å—è –¥–æ–º–∞
‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞
‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥

üìû –ó–∞–ø–∏—Å—å –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: @Dianalisa5

üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç:
        """
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        try:
            await query.delete_message()
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
        from utils import send_image_with_text
        await send_image_with_text(
            bot=context.bot,
            chat_id=user_id,
            image_path="DianaLisa2.jpg",
            text=training_text,
            reply_markup=keyboards.training_packages(),
            parse_mode=ParseMode.HTML
        )
    
    async def handle_contact_support(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
        query = update.callback_query
        user_id = query.from_user.id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        support_text = """
üìû –ü–û–î–î–ï–†–ñ–ö–ê

üí¨ –°–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∏:
‚Ä¢ Telegram: @Dianalisa5
‚Ä¢ Email: support@dianalisa.com
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67

‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:00 - 21:00 (–ú–°–ö)

‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ FAQ
        """
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        try:
            await query.delete_message()
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
        from utils import send_image_with_text
        await send_image_with_text(
            bot=context.bot,
            chat_id=user_id,
            image_path="DianaLisa2.jpg",
            text=support_text,
            reply_markup=keyboards.back_to_main(),
            parse_mode=ParseMode.HTML
        )
    
    async def handle_training_day_1(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–Ω—è 1"""
        query = update.callback_query
        await send_training_content(query, 1, context)
    
    async def handle_training_day_2(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–Ω—è 2"""
        query = update.callback_query
        await send_training_content(query, 2, context)
    
    async def handle_training_day_3(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–Ω—è 3"""
        query = update.callback_query
        await send_training_content(query, 3, context)
    
    async def handle_mark_training(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        query = update.callback_query
        user_id = query.from_user.id
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –¥–Ω—è –∏–∑ callback_data (mark_training_1, mark_training_2, –∏ —Ç.–¥.)
        try:
            day_from_callback = int(callback_data.split('_')[-1])
            logger.info(f"–î–µ–Ω—å –∏–∑ callback_data: {day_from_callback}")
        except:
            day_from_callback = None
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–µ–Ω—å –∏–∑ callback_data: {callback_data}")
        
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            enhanced_logger.log_user_action(user_id, 'mark_training_clicked')

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            try:
                user = db.get_user(user_id)
            except Exception as db_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {db_error}")
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text="‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                )
                return
            
            if not user:
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                )
                return

            # –ï—Å–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
            if user.get('training_completed', False):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–Ω—å –∏–∑ callback –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∏–∑ –ë–î
                current_day = day_from_callback if day_from_callback else user.get('current_day', 1)
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–Ω—å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {current_day}")
                
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await query.delete_message()
                except:
                    pass
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ü–µ–Ω–∫–∏
                keyboard = keyboards.like_dislike_menu(current_day)
                message_text = f"üéØ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –î–µ–Ω—å {current_day} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–ö–∞–∫ –ø—Ä–æ—à–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞?"
                
                await context.bot.send_message(
                    chat_id=user_id,
                    text=message_text,
                    reply_markup=keyboard
                )
                
                enhanced_logger.log_user_action(user_id, 'training_feedback_requested')
                return

            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            new_state = not user.get('training_completed', False)
            try:
                db.update_user(user_id, training_completed=new_state)
                db.add_analytics_event(user_id, 'training_toggled', f'state_{new_state}')
            except Exception as update_error:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {update_error}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            user['training_completed'] = new_state

            if new_state:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
                training_tip = "–†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —É—Å–∫–æ—Ä—è—é—Ç –º–µ—Ç–∞–±–æ–ª–∏–∑–º –Ω–∞ 24 —á–∞—Å–∞!"
                try:
                    db.add_tip_to_collection(user_id, 'training', training_tip)
                except Exception as tip_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–≤–µ—Ç–∞: {tip_error}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–Ω—å –∏–∑ callback –µ—Å–ª–∏ –µ—Å—Ç—å
                current_day = day_from_callback if day_from_callback else user.get('current_day', 1)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –¥–ª—è –¥–Ω—è: {current_day}")
                
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
                try:
                    await query.delete_message()
                except:
                    pass
                
                try:
                    await self.start_training_feedback(user_id, current_day, context)
                    enhanced_logger.log_user_action(user_id, 'training_marked_completed')
                except Exception as feedback_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {feedback_error}")
                    # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f"üéØ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –î–µ–Ω—å {current_day} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–ö–∞–∫ –ø—Ä–æ—à–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞?",
                            reply_markup=keyboards.like_dislike_menu(current_day)
                        )
                        enhanced_logger.log_user_action(user_id, 'training_marked_completed_fallback')
                    except Exception as fallback_error:
                        logger.error(f"–û—à–∏–±–∫–∞ fallback —Å–æ–æ–±—â–µ–Ω–∏—è: {fallback_error}")
                return
            else:
                message = "‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è"
                enhanced_logger.log_user_action(user_id, 'training_marked_incomplete')
                
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                try:
                    await query.delete_message()
                except:
                    pass
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                try:
                    from utils import send_image_with_text
                    await send_image_with_text(
                        bot=context.bot,
                        chat_id=user_id,
                        image_path="DianaLisa2.jpg",
                        text=message,
                        reply_markup=keyboards.main_menu(),
                        parse_mode=ParseMode.HTML
                    )
                except Exception as image_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_error}")
                    # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=message,
                            reply_markup=keyboards.main_menu(),
                            parse_mode=ParseMode.HTML
                        )
                    except Exception as fallback_error:
                        logger.error(f"–û—à–∏–±–∫–∞ fallback —Å–æ–æ–±—â–µ–Ω–∏—è: {fallback_error}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ—Ç–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {e}")
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await query.delete_message()
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"
            )
    
    async def handle_timezone_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
        query = update.callback_query
        user_id = query.from_user.id
        
        timezone = callback_data.replace('timezone_', '')
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º
        from registration import registration_handler
        await registration_handler.complete_timezone_selection(update, context, timezone)
    
    # ============================================================================
    # –ü–õ–ê–¢–ï–ñ–ò –ò –ü–û–î–ü–ò–°–ö–ò
    # ============================================================================
    
    async def handle_buy_course(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∫—É—Ä—Å–∞"""
        query = update.callback_query
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≤–º–µ—Å—Ç–æ edit_message_text
        try:
            await query.delete_message()
        except:
            pass
        
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="üíé –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∫—É—Ä—Å–∞:",
            reply_markup=keyboards.course_packages()
        )
    
    async def handle_buy_training(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
        query = update.callback_query
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≤–º–µ—Å—Ç–æ edit_message_text
        try:
            await query.delete_message()
        except:
            pass
        
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="üíª –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:",
            reply_markup=keyboards.training_packages()
        )
    
    async def handle_package_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞"""
        query = update.callback_query
        user_id = query.from_user.id
        
        package_type = callback_data.replace('package_', '')
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
        await create_payment_invoice(query, package_type, 'course')
    
    async def handle_training_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
        query = update.callback_query
        user_id = query.from_user.id
        
        training_type = callback_data.replace('training_', '')
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
        await create_payment_invoice(query, training_type, 'training')
    
    # ============================================================================
    # –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨
    # ============================================================================
    
    async def handle_admin_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        if callback_data == 'admin_panel':
            # –î–ª—è –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /admin
            await self.handle_admin_command(update, context)
        else:
            await handle_admin_actions(update, context, callback_data)
    
    async def handle_admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin —á–µ—Ä–µ–∑ callback"""
        query = update.callback_query
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        from config import ADMIN_IDS
        if user_id not in ADMIN_IDS:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
            return
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.delete_message()
        except:
            pass
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–∞–ø—Ä—è–º—É—é
        admin_text = """
üõ† <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å DianaLisa Bot</b>

üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!

üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
‚Ä¢ –û—Ç–∑—ã–≤—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏
‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=admin_text,
            reply_markup=keyboards.admin_menu(),
            parse_mode=ParseMode.HTML
        )
    
    async def handle_rating(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏"""
        query = update.callback_query
        user_id = query.from_user.id
        
        rating = int(callback_data.replace('rating_', ''))
        db.add_analytics_event(user_id, 'rating_given', str(rating))
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≤–º–µ—Å—Ç–æ edit_message_text
        try:
            await query.delete_message()
        except:
            pass
        
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"‚≠ê –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {rating}/5! –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å!",
            reply_markup=keyboards.back_to_main()
        )
    
    async def handle_yes(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ '–î–∞'"""
        query = update.callback_query
        user_id = query.from_user.id
        
        db.add_analytics_event(user_id, 'yes_clicked')
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≤–º–µ—Å—Ç–æ edit_message_text
        try:
            await query.delete_message()
        except:
            pass
        
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º!",
            reply_markup=keyboards.main_menu()
        )
    
    async def handle_no(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ '–ù–µ—Ç'"""
        query = update.callback_query
        user_id = query.from_user.id
        
        db.add_analytics_event(user_id, 'no_clicked')
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≤–º–µ—Å—Ç–æ edit_message_text
        try:
            await query.delete_message()
        except:
            pass
        
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="‚ùå –ü–æ–Ω—è—Ç–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=keyboards.main_menu()
        )
    
    async def handle_confirm(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        query = update.callback_query
        user_id = query.from_user.id
        
        action = callback_data.replace('confirm_', '')
        db.add_analytics_event(user_id, 'action_confirmed', action)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≤–º–µ—Å—Ç–æ edit_message_text
        try:
            await query.delete_message()
        except:
            pass
        
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"‚úÖ –î–µ–π—Å—Ç–≤–∏–µ '{action}' –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!",
            reply_markup=keyboards.back_to_main()
        )
    
    async def handle_cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã"""
        query = update.callback_query
        user_id = query.from_user.id
        
        db.add_analytics_event(user_id, 'action_cancelled')
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≤–º–µ—Å—Ç–æ edit_message_text
        try:
            await query.delete_message()
        except:
            pass
        
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=keyboards.main_menu()
        )
    
    async def handle_pagination(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        query = update.callback_query
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        await context.bot.edit_message_text(
                    chat_id=query.message.chat_id,
                    message_id=query.message.message_id,
                    text="üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.",
                    reply_markup=keyboards.back_to_main()
        )
    
    async def handle_confirm_broadcast(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        query = update.callback_query
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        from admin import admin_panel
        if not admin_panel.is_admin(user_id):
            await context.bot.edit_message_text(
                    chat_id=query.message.chat_id,
                    message_id=query.message.message_id,
                    text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
                    reply_markup=keyboards.back_to_main()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        message_text = context.user_data.get('broadcast_message')
        if not message_text:
            await context.bot.edit_message_text(
                    chat_id=query.message.chat_id,
                    message_id=query.message.message_id,
                    text="‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                    reply_markup=keyboards.admin_menu()
            )
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        await admin_panel.execute_broadcast(query, message_text)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data['broadcast_message'] = None
    
    async def handle_cancel_broadcast(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏"""
        query = update.callback_query
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        from admin import admin_panel
        if not admin_panel.is_admin(user_id):
            await context.bot.edit_message_text(
                    chat_id=query.message.chat_id,
                    message_id=query.message.message_id,
                    text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
                    reply_markup=keyboards.back_to_main()
            )
            return
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data['broadcast_message'] = None
        
        await context.bot.edit_message_text(
                    chat_id=query.message.chat_id,
                    message_id=query.message.message_id,
                    text="‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                    reply_markup=keyboards.admin_menu()
        )
    
    async def handle_noop(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è"""
        pass
    
    async def start_training_feedback(self, user_id: int, day: int, context: ContextTypes.DEFAULT_TYPE):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = keyboards.like_dislike_menu(day)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = f"üéØ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –î–µ–Ω—å {day} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–ö–∞–∫ –ø—Ä–æ—à–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞?"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            await context.bot.send_message(
                chat_id=user_id,
                text=message_text,
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
            
            # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üéØ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –î–µ–Ω—å {day} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–ö–∞–∫ –ø—Ä–æ—à–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞?",
                    reply_markup=keyboards.like_dislike_menu(day)
                )
            except Exception as fallback_error:
                logger.error(f"–û—à–∏–±–∫–∞ fallback —Å–æ–æ–±—â–µ–Ω–∏—è: {fallback_error}")
    
    async def handle_training_feedback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –æ—Ü–µ–Ω–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        query = update.callback_query
        user_id = query.from_user.id
        
        try:
            # –ü–∞—Ä—Å–∏–º callback_data: training_feedback_1 -> day=1
            parts = callback_data.split('_')
            if len(parts) < 3:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback_data}")
            
            day = int(parts[2])
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –æ—Ü–µ–Ω–∫—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–Ω—è {day}")
            
            try:
                await query.delete_message()
            except:
                pass
            
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üìù –û—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –î–µ–Ω—å {day}\n\n"
                     "–ù–∞—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–∂–Ω–æ–π –±—ã–ª–∞ –¥–ª—è —Ç–µ–±—è —ç—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞?",
                reply_markup=keyboards.difficulty_rating_menu(day)
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ü–µ–Ω–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {e}")
            try:
                await query.delete_message()
            except:
                pass
            
            await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"
            )
    
    async def handle_difficulty_rating(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        query = update.callback_query
        user_id = query.from_user.id
        
        try:
            # –ü–∞—Ä—Å–∏–º callback_data: difficulty_1_1 -> rating=1, day=1
            parts = callback_data.split('_')
            if len(parts) < 3:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback_data}")
            
            rating = int(parts[1])
            day = int(parts[2])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data[f'difficulty_{day}'] = rating
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ü–µ–Ω–∏–ª —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–Ω—è {day}: {rating}")
            
            try:
                await query.delete_message()
            except:
                pass
            
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üìù –û—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –î–µ–Ω—å {day}\n\n"
                     "–ù–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –±—ã–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏?",
                reply_markup=keyboards.clarity_rating_menu(day)
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {e}")
            try:
                await query.delete_message()
            except:
                pass
            
            await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"
            )
    
    async def handle_clarity_rating(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        query = update.callback_query
        user_id = query.from_user.id
        
        try:
            # –ü–∞—Ä—Å–∏–º callback_data: clarity_1_1 -> rating=1, day=1
            parts = callback_data.split('_')
            if len(parts) < 3:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback_data}")
            
            rating = int(parts[1])
            day = int(parts[2])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data[f'clarity_{day}'] = rating
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ü–µ–Ω–∏–ª –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–Ω—è {day}: {rating}")
            
            try:
                await query.delete_message()
            except:
                pass
            
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üìù –û—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –î–µ–Ω—å {day}\n\n"
                     "–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ?",
                reply_markup=keyboards.comments_menu(day)
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ü–µ–Ω–∫–∏ –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç–∏: {e}")
            try:
                await query.delete_message()
            except:
                pass
            
            await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"
            )
    
    async def handle_finish_feedback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        query = update.callback_query
        user_id = query.from_user.id
        
        try:
            # –ü–∞—Ä—Å–∏–º callback_data: finish_feedback_1 -> day=1
            parts = callback_data.split('_')
            if len(parts) < 3:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback_data}")
            
            day = int(parts[2])
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            difficulty = context.user_data.get(f'difficulty_{day}', 3)
            clarity = context.user_data.get(f'clarity_{day}', 3)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            success = db.add_training_feedback(user_id, day, difficulty, clarity)
            
            if success:
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                context.user_data.pop(f'difficulty_{day}', None)
                context.user_data.pop(f'clarity_{day}', None)
                
                logger.info(f"–û—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–Ω—è {day} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                await context.bot.edit_message_text(
                    chat_id=query.message.chat_id,
                    message_id=query.message.message_id,
                    text=f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –î–µ–Ω—å {day}!\n\n"
                         "–¢–≤–æ—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –∫—É—Ä—Å! üí™",
                    reply_markup=keyboards.main_menu()
                )
            else:
                await context.bot.edit_message_text(
                    chat_id=query.message.chat_id,
                    message_id=query.message.message_id,
                    text="‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
                    reply_markup=keyboards.main_menu()
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏: {e}")
            try:
                await query.delete_message()
            except:
                pass
            
            await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"
            )
    
    async def handle_skip_feedback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–ü—Ä–æ–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        query = update.callback_query
        user_id = query.from_user.id
        
        try:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–ø—É—Å—Ç–∏–ª –æ—Ü–µ–Ω–∫—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
            
            await context.bot.edit_message_text(
                chat_id=query.message.chat_id,
                message_id=query.message.message_id,
                text="‚è≠Ô∏è –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞\n\n"
                     "–¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –æ—Ü–µ–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ–∑–∂–µ!",
                    reply_markup=keyboards.main_menu()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –æ—Ü–µ–Ω–∫–∏: {e}")
            await context.bot.edit_message_text(
                chat_id=query.message.chat_id,
                message_id=query.message.message_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"
            )
    
    async def handle_view_results(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫—É—Ä—Å–∞"""
        query = update.callback_query
        user_id = query.from_user.id
        
        try:
            summary = db.get_user_course_summary(user_id)
            if not summary:
                await context.bot.edit_message_text(
                    chat_id=query.message.chat_id,
                    message_id=query.message.message_id,
                    text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—É—Ä—Å–∞",
                    reply_markup=keyboards.back_to_main()
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            from utils import format_course_progress
            
            course_progress = format_course_progress(summary['current_day'], 3)
            
            report_text = f"""
üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –∫—É—Ä—Å–∞!</b>

{course_progress}

üë§ <b>–ò–º—è:</b> {summary['user_name']}
üèãÔ∏è‚Äç‚ôÄÔ∏è <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</b> {summary['completed_trainings']}/3

üìà <b>–°—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏:</b>
‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {summary['avg_difficulty']}/5
‚Ä¢ –ü–æ–Ω—è—Ç–Ω–æ—Å—Ç—å: {summary['avg_clarity']}/5

üí™ –¢—ã –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!
            """
            
            await context.bot.edit_message_text(
                    chat_id=query.message.chat_id,
                    message_id=query.message.message_id,
                    text=report_text,
                    reply_markup=keyboards.course_completion_menu(),
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            await context.bot.edit_message_text(
                chat_id=query.message.chat_id,
                message_id=query.message.message_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"
            )

    # ========== –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========
    
    async def handle_admin_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–∫–∏"""
        query = update.callback_query
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≤–º–µ—Å—Ç–æ edit_message_text
        try:
            await query.delete_message()
        except:
            pass
        
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞",
            reply_markup=keyboards.admin_menu()
        )
    
    async def handle_admin_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        query = update.callback_query
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≤–º–µ—Å—Ç–æ edit_message_text
        try:
            await query.delete_message()
        except:
            pass
        
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
            reply_markup=keyboards.admin_menu()
        )
    
    async def handle_admin_payments(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π"""
        query = update.callback_query
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≤–º–µ—Å—Ç–æ edit_message_text
        try:
            await query.delete_message()
        except:
            pass
        
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏",
            reply_markup=keyboards.admin_menu()
        )
    
    async def handle_admin_reviews(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤"""
        query = update.callback_query
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≤–º–µ—Å—Ç–æ edit_message_text
        try:
            await query.delete_message()
        except:
            pass
        
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏",
            reply_markup=keyboards.admin_menu()
        )
    
    async def handle_admin_training_feedback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö"""
        query = update.callback_query
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if user_id not in ADMIN_IDS:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        await query.answer()
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –æ—Ç–∑—ã–≤–æ–≤ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
        admin_panel = AdminPanel()
        await admin_panel.show_training_feedback(query)
    
    async def handle_admin_analytics(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        query = update.callback_query
        await context.bot.edit_message_text(
                    chat_id=query.message.chat_id,
                    message_id=query.message.message_id,
                    text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
                    reply_markup=keyboards.admin_menu())
    
    async def handle_admin_export_db(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        query = update.callback_query
        await context.bot.edit_message_text(
                    chat_id=query.message.chat_id,
                    message_id=query.message.message_id,
                    text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                    reply_markup=keyboards.admin_menu())
    
    async def handle_admin_send_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        query = update.callback_query
        await context.bot.edit_message_text(
                    chat_id=query.message.chat_id,
                    message_id=query.message.message_id,
                    text="üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π",
                    reply_markup=keyboards.admin_menu())
    
    async def handle_admin_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
        query = update.callback_query
        await context.bot.edit_message_text(
                    chat_id=query.message.chat_id,
                    message_id=query.message.message_id,
                    text="üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
                    reply_markup=keyboards.admin_menu())
    
    async def handle_admin_clear_db(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î"""
        query = update.callback_query
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if user_id not in ADMIN_IDS:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirmation_text = """
‚ö†Ô∏è <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –û–ß–ò–°–¢–ö–ò –ë–î</b>

üóëÔ∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ:
‚Ä¢ –í—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫—É
‚Ä¢ –ü–ª–∞—Ç–µ–∂–∏
‚Ä¢ –û—Ç–∑—ã–≤—ã

‚ùå <b>–î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ù–ï–õ–¨–ó–Ø!</b>

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?
        """
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –ë–î", callback_data='confirm_clear_db')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='admin_panel')]
        ]
        
        await query.edit_message_text(
            confirmation_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )
    
    async def handle_rating_1(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ 1"""
        await self.handle_rating(update, context, "rating_1")
    
    async def handle_rating_2(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ 2"""
        await self.handle_rating(update, context, "rating_2")
    
    async def handle_rating_3(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ 3"""
        await self.handle_rating(update, context, "rating_3")
    
    async def handle_rating_4(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ 4"""
        await self.handle_rating(update, context, "rating_4")
    
    async def handle_rating_5(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ 5"""
        await self.handle_rating(update, context, "rating_5")
    
    async def handle_timezone_moscow(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ú–æ—Å–∫–≤–∞"""
        await self.handle_timezone_selection(update, context, "timezone_Europe/Moscow")
    
    async def handle_timezone_kiev(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ö–∏–µ–≤"""
        await self.handle_timezone_selection(update, context, "timezone_Europe/Kiev")
    
    async def handle_timezone_minsk(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ú–∏–Ω—Å–∫"""
        await self.handle_timezone_selection(update, context, "timezone_Europe/Minsk")
    
    async def handle_timezone_almaty(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ê–ª–º–∞—Ç—ã"""
        await self.handle_timezone_selection(update, context, "timezone_Asia/Almaty")
    
    async def handle_timezone_new_york(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ù—å—é-–ô–æ—Ä–∫"""
        await self.handle_timezone_selection(update, context, "timezone_America/New_York")
    
    async def handle_timezone_london(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –õ–æ–Ω–¥–æ–Ω"""
        await self.handle_timezone_selection(update, context, "timezone_Europe/London")
    
    async def handle_timezone_berlin(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ë–µ—Ä–ª–∏–Ω"""
        await self.handle_timezone_selection(update, context, "timezone_Europe/Berlin")
    
    async def handle_timezone_paris(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ü–∞—Ä–∏–∂"""
        await self.handle_timezone_selection(update, context, "timezone_Europe/Paris")
    
    async def handle_timezone_tokyo(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –¢–æ–∫–∏–æ"""
        await self.handle_timezone_selection(update, context, "timezone_Asia/Tokyo")
    
    async def handle_timezone_sydney(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –°–∏–¥–Ω–µ–π"""
        await self.handle_timezone_selection(update, context, "timezone_Australia/Sydney")
    
    async def handle_package_basic(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ø–∞–∫–µ—Ç–∞"""
        await self.handle_package_selection(update, context, "package_basic")
    
    async def handle_payment_success(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        query = update.callback_query
        user_id = query.from_user.id
        
        try:
            await query.answer("–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
            await query.edit_message_text(
                "‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
                reply_markup=keyboards.back_to_main()
            )
            enhanced_logger.log_user_action(user_id, 'payment_success')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
    
    async def handle_payment_cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞"""
        query = update.callback_query
        user_id = query.from_user.id
        
        try:
            await query.answer("–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω")
            await query.edit_message_text(
                "‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω.\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.",
                reply_markup=keyboards.back_to_main()
            )
            enhanced_logger.log_user_action(user_id, 'payment_cancel')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞: {e}")
    
    async def handle_training_single(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        await self.handle_training_selection(update, context, "training_single")
    
    async def handle_training_pack5(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ –∏–∑ 5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
        await self.handle_training_selection(update, context, "training_pack5")
    
    async def handle_training_pack10(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ –∏–∑ 10 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
        await self.handle_training_selection(update, context, "training_pack10")
    
    async def handle_training_unlimited(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
        await self.handle_training_selection(update, context, "training_unlimited")
    
    async def handle_start_registration(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        query = update.callback_query
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        user = db.get_user(user_id)
        if user:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await query.delete_message()
            except:
                pass
            
            await context.bot.send_message(
                chat_id=user_id,
                text="‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!",
                reply_markup=keyboards.main_menu()
            )
            return
        
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        from registration import registration_handler
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.delete_message()
        except:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∏–º–µ–Ω–∏ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
        from utils import send_image_with_text
        await send_image_with_text(
            bot=context.bot,
            chat_id=user_id,
            image_path="DianaLisa1.jpg",
            text=MESSAGES['name_request'],
            reply_markup=keyboards.name_input_keyboard(),
            parse_mode=ParseMode.HTML
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await registration_handler.start_registration(update, context)
    
    async def handle_back_to_registration_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—á–∞–ª—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        query = update.callback_query
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        user = db.get_user(user_id)
        if user:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await query.delete_message()
            except:
                pass
            
            await context.bot.send_message(
                chat_id=user_id,
                text="‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!",
                reply_markup=keyboards.main_menu()
            )
            return
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.delete_message()
        except:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
        from utils import send_image_with_text
        await send_image_with_text(
            bot=context.bot,
            chat_id=user_id,
            image_path="DianaLisa1.jpg",
            text=MESSAGES['start_registration_welcome'],
            reply_markup=keyboards.start_registration_menu(),
            parse_mode=ParseMode.HTML
        )
    
    # ============================================================================
    # –û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨ –ò –û–¢–ó–´–í–´
    # ============================================================================
    
    async def handle_feedback_like(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        query = update.callback_query
        user_id = query.from_user.id
        
        try:
            logger.info(f"[FEEDBACK_LIKE] START –¥–ª—è user {user_id}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –¥–Ω—è –∏–∑ callback_data
            day = int(callback_data.split('_')[-1])
            logger.info(f"[FEEDBACK_LIKE] –î–µ–Ω—å: {day}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info(f"[FEEDBACK_LIKE] –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            user = db.get_user(user_id)
            current_day = user.get('current_day', 1)
            logger.info(f"[FEEDBACK_LIKE] –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å: {current_day}")
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
            if current_day < 3:
                logger.info(f"[FEEDBACK_LIKE] –ü–ª–∞–Ω–∏—Ä—É–µ–º –¥–µ–Ω—å {current_day + 1}")
                try:
                    await self.schedule_next_day_opening(user_id, current_day + 1, context)
                    enhanced_logger.log_user_action(user_id, 'day_scheduled', {'day': current_day + 1, 'time': '06:00'})
                except Exception as e:
                    logger.error(f"[FEEDBACK_LIKE] –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.info(f"[FEEDBACK_LIKE] –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
            try:
                await query.delete_message()
            except Exception as e:
                logger.error(f"[FEEDBACK_LIKE] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            next_day_text = f"–î–µ–Ω—å {current_day + 1}" if current_day < 3 else "–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫—É—Ä—Å–∞"
            logger.info(f"[FEEDBACK_LIKE] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            from utils import send_image_with_text
            await send_image_with_text(
                bot=context.bot,
                chat_id=user_id,
                image_path="DianaLisa2.jpg",
                text=f"üòä –û—Ç–ª–∏—á–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!\n\n"
                     f"üéØ –°–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ({next_day_text}) –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 6:00!\n\n"
                     f"–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üí™",
                reply_markup=keyboards.back_to_main(),
                parse_mode=ParseMode.HTML
            )
            logger.info(f"[FEEDBACK_LIKE] SUCCESS")
            
        except Exception as e:
            logger.error(f"[FEEDBACK_LIKE] –û–®–ò–ë–ö–ê: {e}", exc_info=True)
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
                    reply_markup=keyboards.main_menu()
                )
            except:
                pass
    
    async def handle_feedback_dislike(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        query = update.callback_query
        user_id = query.from_user.id
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –¥–Ω—è –∏–∑ callback_data
        day = int(callback_data.split('_')[-1])
        
        try:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await query.delete_message()
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"üòû –ú–Ω–µ –æ—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –î–µ–Ω—å {day} –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å.\n\n"
                     "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:",
                reply_markup=keyboards.text_input_menu(),
                parse_mode=ParseMode.HTML
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞
            context.user_data[f'waiting_feedback_{user_id}'] = day
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await query.delete_message()
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=keyboards.main_menu()
            )
    
    def log_feedback(self, user_id: int, day: int, feedback_type: str, details: str):
        """–ó–∞–ø–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–∞–π–ª"""
        try:
            import os
            from datetime import datetime
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            feedback_file = "training_feedback.txt"
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            with open(feedback_file, "a", encoding="utf-8") as f:
                f.write(f"[{timestamp}] User {user_id}, Day {day}, Type: {feedback_type}, Details: {details}\n")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            from database import db
            success = db.add_training_feedback(user_id, day, 
                                             difficulty_rating=5 if feedback_type == "like" else 1,
                                             clarity_rating=5 if feedback_type == "like" else 1,
                                             comments=details)
            
            if success:
                logger.info(f"–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ë–î: User {user_id}, Day {day}, Type: {feedback_type}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ –ë–î: User {user_id}, Day {day}, Type: {feedback_type}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
    
    async def schedule_next_day_opening(self, user_id: int, next_day: int, context: ContextTypes.DEFAULT_TYPE):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ 6:00"""
        try:
            logger.info(f"[SCHEDULE] –ù–∞—á–∞–ª–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –î–Ω—è {next_day} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            from jobs import scheduler
            from datetime import datetime, timedelta
            import pytz
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
            user = db.get_user(user_id)
            if not user:
                logger.error(f"[SCHEDULE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return
                
            user_timezone = user.get('timezone') or 'Europe/Moscow'  # –ó–∞—â–∏—Ç–∞ –æ—Ç None
            if user_timezone is None:
                user_timezone = 'Europe/Moscow'
            logger.info(f"[SCHEDULE] –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_timezone}")
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 6:00
            tz = pytz.timezone(user_timezone)
            now = datetime.now(tz)
            tomorrow_6am = (now + timedelta(days=1)).replace(hour=6, minute=0, second=0, microsecond=0)
            logger.info(f"[SCHEDULE] –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {tomorrow_6am}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            if not hasattr(scheduler, 'scheduler'):
                logger.error(f"[SCHEDULE] –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            job_id = f"open_day_{next_day}_{user_id}"
            logger.info(f"[SCHEDULE] –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —Å ID: {job_id}")
            
            scheduler.scheduler.add_job(
                func=self.open_next_training_day,
                trigger='date',
                run_date=tomorrow_6am,
                args=[user_id, next_day, context],
                id=job_id,
                replace_existing=True
            )
            
            logger.info(f"[SCHEDULE] [OK] –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∏–µ –î–Ω—è {next_day} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {tomorrow_6am}")
            
        except Exception as e:
            logger.error(f"[SCHEDULE] [FAIL] –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è: {e}", exc_info=True)
    
    async def open_next_training_day(self, user_id: int, day: int, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º current_day –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db.update_user(user_id, current_day=day)
            enhanced_logger.log_user_action(user_id, 'day_opened_scheduled', {'day': day, 'time': '06:00'})
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n\n"
                     f"üéØ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –î–µ–Ω—å {day} —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞!\n\n"
                     f"–í—Ä–µ–º—è –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—ã–π –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫! üí™",
                reply_markup=keyboards.main_menu(),
                parse_mode=ParseMode.HTML
            )
            
            logger.info(f"–û—Ç–∫—Ä—ã—Ç –î–µ–Ω—å {day} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è: {e}")
    
    async def handle_leave_review(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞"""
        query = update.callback_query
        await context.bot.edit_message_text(
                    chat_id=query.message.chat_id,
                    message_id=query.message.message_id,
                    text="‚≠ê –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å.",
                    reply_markup=keyboards.main_menu()
        )
    
    async def handle_confirm_clear_db(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        query = update.callback_query
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        from config import ADMIN_IDS
        if user_id not in ADMIN_IDS:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        from admin import admin_panel
        await admin_panel.clear_database(query)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
callback_handlers = CallbackHandlers()
