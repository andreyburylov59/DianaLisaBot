"""
üïí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –±–æ—Ç–∞ DianaLisa
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏
"""

import logging
import asyncio
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.date import DateTrigger
from apscheduler.triggers.interval import IntervalTrigger
from pytz import timezone
import pytz

from config import SCHEDULER_SETTINGS, MESSAGES
from database import db
from utils import get_user_timezone
from training import training_system

logger = logging.getLogger(__name__)

class JobScheduler:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –∑–∞–¥–∞—á"""
    
    def __init__(self):
        self.scheduler = AsyncIOScheduler()
        self.job_ids = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ ID –∑–∞–¥–∞—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self._started = False
    
    def schedule_user_jobs(self, user_id: int, user_timezone: str = 'Europe/Moscow'):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.remove_user_jobs(user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            tz = timezone(user_timezone)
            
            # –£—Ç—Ä–µ–Ω–Ω–µ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (8:00)
            morning_job_id = f"morning_{user_id}"
            self.scheduler.add_job(
                func=self.send_morning_motivation,
                trigger=CronTrigger(hour=8, minute=0, timezone=tz),
                args=[user_id],
                id=morning_job_id,
                replace_existing=True,
                max_instances=1
            )
            
            # –í–µ—á–µ—Ä–Ω—è—è –º–æ—Ç–∏–≤–∞—Ü–∏—è (20:00)
            evening_job_id = f"evening_{user_id}"
            self.scheduler.add_job(
                func=self.send_evening_motivation,
                trigger=CronTrigger(hour=20, minute=0, timezone=tz),
                args=[user_id],
                id=evening_job_id,
                replace_existing=True,
                max_instances=1
            )
            
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ (18:00)
            training_job_id = f"training_{user_id}"
            self.scheduler.add_job(
                func=self.send_training_reminder,
                trigger=CronTrigger(hour=18, minute=0, timezone=tz),
                args=[user_id],
                id=training_job_id,
                replace_existing=True,
                max_instances=1
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á
            self.job_ids[user_id] = {
                'morning': morning_job_id,
                'evening': evening_job_id,
                'training': training_job_id
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db.add_scheduled_job(user_id, 'morning_motivation', datetime.now().replace(hour=8, minute=0))
            db.add_scheduled_job(user_id, 'evening_motivation', datetime.now().replace(hour=20, minute=0))
            db.add_scheduled_job(user_id, 'training_reminder', datetime.now().replace(hour=18, minute=0))
            
            logger.info(f"–ó–∞–¥–∞—á–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    def remove_user_jobs(self, user_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if user_id in self.job_ids:
                for job_id in self.job_ids[user_id].values():
                    try:
                        self.scheduler.remove_job(job_id)
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É {job_id}: {e}")
                
                del self.job_ids[user_id]
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            jobs = db.get_scheduled_jobs(user_id)
            for job in jobs:
                db.deactivate_job(job['id'])
            
            logger.info(f"–ó–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def send_morning_motivation(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            import main
            application = main.application
            
            if not application:
                logger.warning("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
                return
            
            from keyboards import Keyboards
            keyboards = Keyboards()
            
            user = db.get_user(user_id)
            if not user:
                return
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            import random
            motivation = random.choice(MESSAGES['morning_motivation'])
            
            message_text = f"""
{motivation}

üëã –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {user['first_name']}!

üåÖ –°–µ–≥–æ–¥–Ω—è –î–µ–Ω—å {user['current_day']} —Ç–≤–æ–µ–≥–æ –∫—É—Ä—Å–∞!

üí™ –ì–æ—Ç–æ–≤–∞ –Ω–∞—á–∞—Ç—å –¥–µ–Ω—å —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?

üéØ –ü–æ–º–Ω–∏: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ —Ü–µ–ª–∏!
            """
            
            await application.bot.send_message(
                chat_id=user_id,
                text=message_text,
                reply_markup=keyboards.training_menu(user['current_day'])
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            db.add_analytics_event(user_id, 'morning_motivation_sent')
            
            logger.info(f"–£—Ç—Ä–µ–Ω–Ω–µ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def send_evening_motivation(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ—á–µ—Ä–Ω–µ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            import main
            application = main.application
            
            if not application:
                logger.warning("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
                return
            
            user = db.get_user(user_id)
            if not user:
                return
            
            motivation_text = f"""
üåô –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, {user['first_name']}!

{MESSAGES['evening_motivation']}

üí™ –¢—ã –º–æ–ª–æ–¥–µ—Ü! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!
            """
            
            await application.bot.send_message(
                chat_id=user_id,
                text=motivation_text,
                reply_markup=keyboards.main_menu()
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            db.add_analytics_event(user_id, 'evening_motivation_sent')
            
            logger.info(f"–í–µ—á–µ—Ä–Ω—è—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—á–µ—Ä–Ω–µ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏: {e}")
    
    async def send_training_reminder(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ"""
        try:
            user = db.get_user(user_id)
            if not user:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
            if user['training_completed']:
                return
            
            await training_system.send_training_reminder(user_id, user['current_day'])
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ: {e}")
    
    def schedule_daily_reset(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –æ—Ç–º–µ—Ç–æ–∫"""
        try:
            # –°–±—Ä–æ—Å –æ—Ç–º–µ—Ç–æ–∫ –≤ –ø–æ–ª–Ω–æ—á—å –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
            self.scheduler.add_job(
                func=self.reset_daily_marks,
                trigger=CronTrigger(hour=0, minute=0, timezone='Europe/Moscow'),
                id='daily_reset',
                replace_existing=True,
                max_instances=1
            )
            
            logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å –æ—Ç–º–µ—Ç–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞: {e}")
    
    async def reset_daily_marks(self):
        """–°–±—Ä–æ—Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç–º–µ—Ç–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            users = db.get_all_users()
            reset_count = 0
            
            for user in users:
                if db.reset_daily_marks(user['user_id']):
                    reset_count += 1
            
            logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç–º–µ—Ç–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è {reset_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç–º–µ—Ç–æ–∫: {e}")
    
    def schedule_day_progression(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ –¥–Ω–µ–π –∫—É—Ä—Å–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ –¥–Ω–µ–π –≤ –ø–æ–ª–Ω–æ—á—å
            self.scheduler.add_job(
                func=self.progress_user_days,
                trigger=CronTrigger(hour=0, minute=30, timezone='Europe/Moscow'),
                id='day_progression_midnight',
                replace_existing=True,
                max_instances=1
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ –¥–Ω–µ–π —É—Ç—Ä–æ–º (8:00)
            self.scheduler.add_job(
                func=self.progress_user_days,
                trigger=CronTrigger(hour=8, minute=0, timezone='Europe/Moscow'),
                id='day_progression_morning',
                replace_existing=True,
                max_instances=1
            )
            
            # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å —á–µ–∫-–ª–∏—Å—Ç–∞ –≤ –ø–æ–ª–Ω–æ—á—å
            self.scheduler.add_job(
                func=self.reset_daily_checklist,
                trigger=CronTrigger(hour=0, minute=0, timezone='Europe/Moscow'),
                id='daily_checklist_reset',
                replace_existing=True,
                max_instances=1
            )
            
            logger.info("–ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è –¥–Ω–µ–π –∫—É—Ä—Å–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ –¥–Ω–µ–π: {e}")
    
    async def progress_user_days(self):
        """–ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è –¥–Ω–µ–π –∫—É—Ä—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            users = db.get_all_users()
            progressed_count = 0
            
            for user in users:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
                if self.should_progress_day(user):
                    new_day = min(user['current_day'] + 1, 3)  # –ú–∞–∫—Å–∏–º—É–º 3 –¥–Ω—è –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –ø–µ—Ä–µ—Ö–æ–¥–∞
                    last_activity = datetime.fromisoformat(user['last_activity'])
                    hours_since_activity = (datetime.now() - last_activity).total_seconds() / 3600
                    
                    current_hour = datetime.now().hour
                    is_morning = 8 <= current_hour <= 12
                    
                    if hours_since_activity >= 24 and user.get('training_completed', False):
                        reason = "completed"
                    elif is_morning and hours_since_activity >= 8 and user.get('training_completed', False):
                        reason = "morning"
                    else:
                        reason = "unknown"
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–Ω—å –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
                    db.update_user(
                        user['user_id'], 
                        current_day=new_day,
                        training_completed=False
                    )
                    progressed_count += 1
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –¥–Ω–µ
                    await self.send_new_day_notification(user['user_id'], new_day, reason)
            
            logger.info(f"–ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è –¥–Ω–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è {progressed_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ –¥–Ω–µ–π: {e}")
    
    def should_progress_day(self, user: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å"""
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å, –µ—Å–ª–∏:
        # 1. –≠—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –±–∞–∑–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞
        # 2. –ò –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π:
        #    - –ü—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ò —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        #    - –ù–∞—Å—Ç—É–ø–∏–ª–æ —É—Ç—Ä–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è (8:00) –ò —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        
        if user['current_day'] >= 3:
            return False
        
        last_activity = datetime.fromisoformat(user['last_activity'])
        hours_since_activity = (datetime.now() - last_activity).total_seconds() / 3600
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        training_completed = user.get('training_completed', False)
        
        # –£—Å–ª–æ–≤–∏–µ 1: –ü—Ä–æ—à–ª–æ 24+ —á–∞—Å–æ–≤ –ò —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        condition_1 = hours_since_activity >= 24 and training_completed
        
        # –£—Å–ª–æ–≤–∏–µ 2: –ù–∞—Å—Ç—É–ø–∏–ª–æ —É—Ç—Ä–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è (8:00)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å —É—Ç—Ä–æ (8:00-12:00), —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 8 —á–∞—Å–æ–≤
        # –ò —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        current_hour = datetime.now().hour
        is_morning = 8 <= current_hour <= 12
        condition_2 = is_morning and hours_since_activity >= 8 and training_completed
        
        return condition_1 or condition_2
    
    async def send_new_day_notification(self, user_id: int, new_day: int, reason: str = "completed"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –¥–Ω–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            import main
            application = main.application
            
            if not application:
                logger.warning("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
                return
            
            from keyboards import Keyboards
            keyboards = Keyboards()
            from training import send_training_content
            
            user = db.get_user(user_id)
            if not user:
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏—á–∏–Ω—ã –ø–µ—Ä–µ—Ö–æ–¥–∞
            if reason == "completed":
                notification_text = f"""
üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, {user['first_name']}!

üìÖ –°–µ–≥–æ–¥–Ω—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –î–µ–Ω—å {new_day} —Ç–≤–æ–µ–≥–æ –∫—É—Ä—Å–∞!

üèãÔ∏è‚Äç‚ôÄÔ∏è –¢—ã –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–∏–ª—Å—è(–∞—Å—å) —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –¥–Ω–µ–º!

üí™ –¢–≤–æ—è –Ω–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–∂–µ –≥–æ—Ç–æ–≤–∞!
                """
            else:  # reason == "morning"
                notification_text = f"""
üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {user['first_name']}!

üìÖ –°–µ–≥–æ–¥–Ω—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –î–µ–Ω—å {new_day} —Ç–≤–æ–µ–≥–æ –∫—É—Ä—Å–∞!

üèãÔ∏è‚Äç‚ôÄÔ∏è –í—Ä–µ–º—è –¥–ª—è –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!

üí™ –ù–∞—á–Ω–µ–º –¥–µ–Ω—å —Å –ø–æ–ª—å–∑–æ–π –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è!
                """
            
            await application.bot.send_message(
                chat_id=user_id,
                text=notification_text,
                reply_markup=keyboards.main_menu()
            )
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–æ–≤–æ–≥–æ –¥–Ω—è
            await self.send_automatic_training(user_id, new_day)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            db.add_analytics_event(user_id, 'new_day_notification', f'day_{new_day}_reason_{reason}')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –¥–Ω–µ: {e}")
    
    async def send_automatic_training(self, user_id: int, day: int):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –¥–Ω—è"""
        try:
            import main
            application = main.application
            
            if not application:
                return
            
            from training import TrainingSystem
            from keyboards import Keyboards
            keyboards = Keyboards()
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            
            training_manager = TrainingSystem()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            content = training_manager.training_content.get(day)
            if not content:
                logger.error(f"–ö–æ–Ω—Ç–µ–Ω—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–Ω—è {day} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π
            message_text = f"""
üèãÔ∏è‚Äç‚ôÄÔ∏è <b>–î–µ–Ω—å {day} - {content['title']}</b>

{content['description']}

{content['content']}

{content['motivation']}
            """
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
            for exercise_group in content['exercises']:
                message_text += f"\n\n<b>{exercise_group['name']}</b>\n{exercise_group['description']}\n"
                for exercise in exercise_group['exercises']:
                    message_text += f"‚Ä¢ {exercise}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç—ã
            if content['tips']:
                message_text += "\n\nüí° <b>–°–æ–≤–µ—Ç—ã:</b>\n"
                for tip in content['tips']:
                    message_text += f"{tip}\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [InlineKeyboardButton("‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", callback_data='mark_training')],
                [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='main_menu')]
            ]
            
            if day == 3:
                keyboard.insert(1, [InlineKeyboardButton("üíé –ü–æ–ª–Ω—ã–π –∫—É—Ä—Å", callback_data='full_course')])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
            if content['image']:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º
                from utils import send_image_with_text
                await send_image_with_text(
                    bot=application.bot,
                    chat_id=user_id,
                    image_path=content['image'],
                    text=message_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
            else:
                await application.bot.send_message(
                    chat_id=user_id,
                    text=message_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            db.add_analytics_event(user_id, 'training_auto_sent', f'day_{day}')
            
            logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è {day} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {e}")
    
    def schedule_analytics_cleanup(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é
            self.scheduler.add_job(
                func=self.cleanup_old_analytics,
                trigger=CronTrigger(day_of_week=0, hour=2, minute=0, timezone='Europe/Moscow'),
                id='analytics_cleanup',
                replace_existing=True,
                max_instances=1
            )
            
            logger.info("–û—á–∏—Å—Ç–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
    
    async def cleanup_old_analytics(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è —Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π
            cutoff_date = datetime.now() - timedelta(days=90)
            
            with db.connection() as conn:
                cursor = conn.cursor()
                cursor.execute(
                    'DELETE FROM analytics WHERE timestamp < ?',
                    (cutoff_date,)
                )
                deleted_count = cursor.rowcount
                conn.commit()
            
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
    
    def schedule_backup(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 3:00
            self.scheduler.add_job(
                func=self.backup_database,
                trigger=CronTrigger(hour=3, minute=0, timezone='Europe/Moscow'),
                id='database_backup',
                replace_existing=True,
                max_instances=1
            )
            
            logger.info("–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    async def backup_database(self):
        """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            import shutil
            from datetime import datetime
            
            backup_filename = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
            shutil.copy2(db.db_path, backup_filename)
            
            logger.info(f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_filename}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
    
    def start_all_scheduled_jobs(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
            if not self._started:
                self.scheduler.start()
                self._started = True
                logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏
            self.schedule_daily_reset()
            self.schedule_day_progression()
            self.schedule_analytics_cleanup()
            self.schedule_backup()
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self.restore_user_jobs()
            
            logger.info("–í—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")
    
    def restore_user_jobs(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            jobs = db.get_scheduled_jobs()
            
            for job in jobs:
                user_id = job['user_id']
                user = db.get_user(user_id)
                
                if user:
                    self.schedule_user_jobs(user_id, user['timezone'])
            
            logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–¥–∞—á–∏ –¥–ª—è {len(jobs)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    
    def shutdown(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            if self._started:
                self.scheduler.shutdown()
                self._started = False
                logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    def get_job_status(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if user_id not in self.job_ids:
                return {'status': 'no_jobs'}
            
            status = {}
            for job_type, job_id in self.job_ids[user_id].items():
                try:
                    job = self.scheduler.get_job(job_id)
                    status[job_type] = {
                        'exists': job is not None,
                        'next_run': job.next_run_time.isoformat() if job and job.next_run_time else None
                    }
                except Exception as e:
                    status[job_type] = {'exists': False, 'error': str(e)}
            
            return status
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á: {e}")
            return {'error': str(e)}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = JobScheduler()
