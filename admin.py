"""
üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –±–æ—Ç–∞ DianaLisa
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π, —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
"""

import logging
import csv
import io
import asyncio
import os
import sys
import subprocess
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from config import ADMIN_IDS, MESSAGES
from keyboards import Keyboards
from database import db
from payment import payment_system
# from validation import input_validator, error_handler, ValidationError  # –ú–æ–¥—É–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä
keyboards = Keyboards()

class AdminPanel:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é"""
    
    def __init__(self):
        self.admin_ids = ADMIN_IDS
        self.broadcast_queue = []  # –û—á–µ—Ä–µ–¥—å —Ä–∞—Å—Å—ã–ª–∫–∏
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        return user_id in self.admin_ids
    
    async def handle_admin_actions(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        try:
            query = update.callback_query
            user_id = query.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
            if not self.is_admin(user_id):
                await query.edit_message_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
                    reply_markup=keyboards.back_to_main()
                )
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
            if callback_data == 'admin_stats':
                await self.show_statistics(query)
            elif callback_data == 'admin_send_message':
                await self.start_broadcast(query)
            elif callback_data == 'admin_export_db':
                await self.export_database(query)
            elif callback_data == 'admin_analytics':
                await self.show_simple_analytics(query)
            elif callback_data == 'admin_users':
                await self.show_users(query)
            elif callback_data == 'admin_payments':
                await self.show_payments(query)
            elif callback_data == 'admin_reviews':
                await self.show_reviews(query)
            elif callback_data == 'admin_clear_db':
                await self.show_clear_db_confirmation(query)
            elif callback_data == 'confirm_clear_db':
                await self.clear_database(query)
            elif callback_data.startswith('admin_user_'):
                await self.handle_user_action(query, callback_data)
            elif callback_data.startswith('admin_message_'):
                await self.start_user_message(query, callback_data)
            else:
                await query.edit_message_text(
                    "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∞–¥–º–∏–Ω—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
                    reply_markup=keyboards.admin_menu()
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è.",
                reply_markup=keyboards.admin_menu()
            )
    
    async def show_statistics(self, query):
        """–ü–æ–∫–∞–∑ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            users_count = db.get_users_count()
            premium_users = len([u for u in db.get_all_users() if u['is_premium']])
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
            try:
                payment_stats = payment_system.get_payment_statistics()
                total_payments = payment_stats.get('total', {}).get('payments', 0)
                total_amount = payment_stats.get('total', {}).get('amount', 0)
                avg_amount = payment_stats.get('total', {}).get('average', 0)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
                total_payments = 0
                total_amount = 0
                avg_amount = 0
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –∫—É—Ä—Å–∞
            users_by_day = {}
            for user in db.get_all_users():
                day = user['current_day']
                users_by_day[day] = users_by_day.get(day, 0) + 1
            
            stats_text = f"""
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
‚Ä¢ –í—Å–µ–≥–æ: {users_count}
‚Ä¢ –ü—Ä–µ–º–∏—É–º: {premium_users}
‚Ä¢ –û–±—ã—á–Ω—ã–µ: {users_count - premium_users}

üí∞ –ü–ª–∞—Ç–µ–∂–∏:
‚Ä¢ –í—Å–µ–≥–æ: {total_payments}
‚Ä¢ –°—É–º–º–∞: {total_amount:.2f} ‚ÇΩ
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_amount:.2f} ‚ÇΩ

üìÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –¥–Ω—è–º:
‚Ä¢ –î–µ–Ω—å 1: {users_by_day.get(1, 0)}
‚Ä¢ –î–µ–Ω—å 2: {users_by_day.get(2, 0)}
‚Ä¢ –î–µ–Ω—å 3: {users_by_day.get(3, 0)}

üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%H:%M:%S')}
            """
            
            await query.edit_message_text(
                stats_text,
                reply_markup=keyboards.admin_menu(),
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
                reply_markup=keyboards.admin_menu()
            )
    
    async def show_simple_analytics(self, query):
        """–ü–æ–∫–∞–∑ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            users_count = db.get_users_count()
            premium_users = len([u for u in db.get_all_users() if u['is_premium']])
            
            analytics_text = f"""
üìä <b>–ê–ù–ê–õ–ò–¢–ò–ö–ê</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {users_count}
‚Ä¢ –ü—Ä–µ–º–∏—É–º: {premium_users}
‚Ä¢ –û–±—ã—á–Ω—ã–µ: {users_count - premium_users}

üìà <b>–ö–æ–Ω–≤–µ—Ä—Å–∏—è:</b>
‚Ä¢ –í –ø—Ä–µ–º–∏—É–º: {(premium_users / max(users_count, 1)) * 100:.1f}%

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –§–æ–∫—É—Å –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤ –ø—Ä–µ–º–∏—É–º
‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            """
            
            await query.edit_message_text(
                analytics_text,
                reply_markup=keyboards.admin_menu(),
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.",
                reply_markup=keyboards.admin_menu()
            )
    
    
    
    
    
    
    async def show_users(self, query):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            users = db.get_all_users()[:10]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
            
            users_text = "üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)\n\n"
            
            for user in users:
                status = "üíé –ü—Ä–µ–º–∏—É–º" if user['is_premium'] else "üë§ –û–±—ã—á–Ω—ã–π"
                phone = user.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
                users_text += f"‚Ä¢ {user['first_name']} (@{user['username']}) - {status}\n"
                users_text += f"  üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                users_text += f"  –î–µ–Ω—å: {user['current_day']}, –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user['registration_date'][:10]}\n\n"
            
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_menu')]
            ]
            
            await query.edit_message_text(
                users_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                reply_markup=keyboards.admin_menu()
            )
    
    async def show_payments(self, query):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
        try:
            payment_stats = payment_system.get_payment_statistics()
            
            payments_text = f"""
üí∞ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–õ–ê–¢–ï–ñ–ï–ô

üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {payment_stats['total']['payments']}
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {payment_stats['total']['amount']:.2f} ‚ÇΩ
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {payment_stats['total']['average']:.2f} ‚ÇΩ

üìà –ü–æ —Ç–∏–ø–∞–º:
            """
            
            for stat in payment_stats['by_type']:
                payments_text += f"‚Ä¢ {stat['type']}: {stat['count']} ({stat['amount']:.2f} ‚ÇΩ)\n"
            
            payments_text += "\nüìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏:\n"
            for stat in payment_stats['daily'][:5]:
                payments_text += f"‚Ä¢ {stat['date']}: {stat['count']} ({stat['amount']:.2f} ‚ÇΩ)\n"
            
            await query.edit_message_text(
                payments_text,
                reply_markup=keyboards.admin_menu(),
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π.",
                reply_markup=keyboards.admin_menu()
            )
    
    async def show_reviews(self, query):
        """–ü–æ–∫–∞–∑ –æ—Ç–∑—ã–≤–æ–≤"""
        try:
            reviews = db.get_reviews(approved_only=False)[:5]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
            
            reviews_text = "‚≠ê –û–¢–ó–´–í–´ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)\n\n"
            
            if not reviews:
                reviews_text += "üìù –û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
            else:
                for review in reviews:
                    status = "‚úÖ –û–¥–æ–±—Ä–µ–Ω" if review['is_approved'] else "‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
                    reviews_text += f"‚Ä¢ {review['first_name']} - {review['rating']}/5 ‚≠ê\n"
                    reviews_text += f"  {review['review_text'][:100]}...\n"
                    reviews_text += f"  {status} - {review['created_at'][:10]}\n\n"
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –≤—Å–µ", callback_data='admin_approve_reviews')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_menu')]
            ]
            
            await query.edit_message_text(
                reviews_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –æ—Ç–∑—ã–≤–æ–≤: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤.",
                reply_markup=keyboards.admin_menu()
            )
    
    async def show_training_feedback(self, query):
        """–ü–æ–∫–∞–∑ –æ—Ç–∑—ã–≤–æ–≤ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö"""
        try:
            feedback = db.get_all_training_feedback()[:10]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            
            feedback_text = "üí™ –û–¢–ó–´–í–´ –û –¢–†–ï–ù–ò–†–û–í–ö–ê–• (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)\n\n"
            
            if not feedback:
                feedback_text += "üìù –û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
            else:
                for fb in feedback:
                    name = fb.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    day = fb.get('day', '?')
                    difficulty = fb.get('difficulty_rating', 0)
                    clarity = fb.get('clarity_rating', 0)
                    comments = fb.get('comments', '')
                    timestamp = fb.get('timestamp', '')[:10]
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–∑—ã–≤–∞
                    if difficulty >= 4 and clarity >= 4:
                        emoji = "üòä"
                        type_text = "–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å"
                    elif difficulty <= 2 and clarity <= 2:
                        emoji = "üòû"
                        type_text = "–ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å"
                    else:
                        emoji = "üòê"
                        type_text = "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"
                    
                    feedback_text += f"{emoji} <b>{name}</b> - –î–µ–Ω—å {day}\n"
                    feedback_text += f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty}/5 | –ü–æ–Ω—è—Ç–Ω–æ—Å—Ç—å: {clarity}/5\n"
                    feedback_text += f"   –¢–∏–ø: {type_text}\n"
                    if comments:
                        feedback_text += f"   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comments[:50]}...\n"
                    feedback_text += f"   –î–∞—Ç–∞: {timestamp}\n\n"
            
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_menu')]
            ]
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º delete_message + send_message –≤–º–µ—Å—Ç–æ edit_message_text
            try:
                await query.delete_message()
            except:
                pass
            
            await query.get_bot().send_message(
                chat_id=query.message.chat_id,
                text=feedback_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –æ—Ç–∑—ã–≤–æ–≤ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö: {e}")
            try:
                await query.delete_message()
            except:
                pass
            
            await query.get_bot().send_message(
                chat_id=query.message.chat_id,
                text="‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö.",
                reply_markup=keyboards.admin_menu()
            )
    
    async def start_broadcast(self, query):
        """–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        try:
            broadcast_text = """
üì® –†–ê–°–°–´–õ–ö–ê –°–û–û–ë–©–ï–ù–ò–ô

–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:

üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ä–∞–∑–º–µ—Ç–∫–∞
üìù –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤
‚è∞ –†–∞—Å—Å—ã–ª–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è
            """
            
            await query.edit_message_text(
                broadcast_text,
                reply_markup=keyboards.back_to_main()
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
            # context.user_data['waiting_for_broadcast'] = True  # –£–±—Ä–∞–Ω–æ - context –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.",
                reply_markup=keyboards.admin_menu()
            )
    
    async def process_broadcast_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        try:
            message_text = update.message.text
            
            # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            if not message_text or len(message_text.strip()) < 3:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞."
                )
                return
            
            if len(message_text) > 4000:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤."
                )
                return
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
            confirmation_text = f"""
üì® –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –†–ê–°–°–´–õ–ö–ò

–°–æ–æ–±—â–µ–Ω–∏–µ:
{message_text}

üìä –ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {db.get_users_count()} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?
            """
            
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data='confirm_broadcast'),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_broadcast')
                ]
            ]
            
            await update.message.reply_text(
                confirmation_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.HTML
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
            context.user_data['broadcast_message'] = message_text
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=keyboards.admin_menu()
            )
    
    async def execute_broadcast(self, query, message_text: str):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        try:
            users = db.get_all_users()
            sent_count = 0
            failed_count = 0
            
            await query.edit_message_text(
                f"üì§ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
                reply_markup=keyboards.back_to_main()
            )
            
            for user in users:
                try:
                    await query.bot.send_message(
                        chat_id=user['user_id'],
                        text=message_text,
                        parse_mode=ParseMode.HTML
                    )
                    sent_count += 1
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    await asyncio.sleep(0.1)
                    
                except Exception as e:
                    failed_count += 1
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
            
            # –û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ
            report_text = f"""
üìä –û–¢–ß–ï–¢ –û –†–ê–°–°–´–õ–ö–ï

‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}
‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {failed_count}
üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}

üïí –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}
            """
            
            await query.edit_message_text(
                report_text,
                reply_markup=keyboards.admin_menu(),
                parse_mode=ParseMode.HTML
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            db.add_analytics_event(query.from_user.id, 'broadcast_sent', f'sent_{sent_count}_failed_{failed_count}')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏.",
                reply_markup=keyboards.admin_menu()
            )
    
    async def export_database(self, query):
        """–≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = db.get_all_users()
            
            csv_data = io.StringIO()
            writer = csv.writer(csv_data)
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            writer.writerow([
                'user_id', 'username', 'first_name', 'last_name', 'email',
                'timezone', 'current_day', 'registration_date', 'is_premium',
                'total_referrals', 'total_purchases'
            ])
            
            # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for user in users:
                writer.writerow([
                    user['user_id'], user['username'], user['first_name'],
                    user['last_name'], user['email'], user['timezone'],
                    user['current_day'], user['registration_date'],
                    user['is_premium'], user['total_referrals'],
                    user['total_purchases']
                ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            csv_data.seek(0)
            await query.bot.send_document(
                chat_id=query.from_user.id,
                document=io.BytesIO(csv_data.getvalue().encode('utf-8')),
                filename=f"users_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                caption=f"üìä –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({len(users)} –∑–∞–ø–∏—Å–µ–π)"
            )
            
            await query.edit_message_text(
                f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(users)} –∑–∞–ø–∏—Å–µ–π.",
                reply_markup=keyboards.admin_menu()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=keyboards.admin_menu()
            )
    
    async def handle_user_action(self, query, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
            user_id = int(callback_data.split('_')[-1])
            user = db.get_user(user_id)
            
            if not user:
                await query.edit_message_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=keyboards.admin_menu()
                )
                return
            
            if 'stats' in callback_data:
                await self.show_user_stats(query, user)
            elif 'message' in callback_data:
                await self.start_user_message(query, user_id)
            elif 'payments' in callback_data:
                await self.show_user_payments(query, user_id)
            elif 'reviews' in callback_data:
                await self.show_user_reviews(query, user_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è.",
                reply_markup=keyboards.admin_menu()
            )
    
    async def show_user_stats(self, query, user: dict):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            stats = db.get_user_stats(user['user_id'])
            
            stats_text = f"""
üë§ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø

üëã –ò–º—è: {user['first_name']} {user['last_name'] or ''}
üìß Email: {user['email']}
üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {user['timezone']}
üìÖ –î–µ–Ω—å –∫—É—Ä—Å–∞: {user['current_day']}
üíé –ü—Ä–µ–º–∏—É–º: {'–î–∞' if user['is_premium'] else '–ù–µ—Ç'}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user['registration_date'][:10]}

üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:
‚Ä¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['events'].get('training_completed', 0)}
‚Ä¢ –ö–Ω–æ–ø–∫–∏ –Ω–∞–∂–∞—Ç–æ: {stats['events'].get('button_click', 0)}
‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π: {stats['payments_count']}
‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {stats['total_spent']:.2f} ‚ÇΩ
            """
            
            keyboard = [
                [InlineKeyboardButton("üì® –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f'admin_message_{user["user_id"]}')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_users')]
            ]
            
            await query.edit_message_text(
                stats_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                reply_markup=keyboards.admin_menu()
            )
    
    async def start_user_message(self, query, user_id: int):
        """–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            user = db.get_user(user_id)
            
            message_text = f"""
üì® –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø

–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {user['first_name']} (@{user['username']})

–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:
            """
            
            await query.edit_message_text(
                message_text,
                reply_markup=keyboards.back_to_main()
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            # context.user_data['waiting_for_user_message'] = user_id
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                reply_markup=keyboards.admin_menu()
            )
    
    async def process_user_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            message_text = update.message.text
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await update.message.bot.send_message(
                chat_id=user_id,
                text=f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{message_text}",
                parse_mode=ParseMode.HTML
            )
            
            await update.message.reply_text(
                f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}",
                reply_markup=keyboards.admin_menu()
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            db.add_analytics_event(update.effective_user.id, 'admin_message_sent', str(user_id))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                reply_markup=keyboards.admin_menu()
            )
    
    async def show_clear_db_confirmation(self, query):
        """–ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            confirmation_text = """
‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï! –û–ß–ò–°–¢–ö–ê –ò –ü–ï–†–ï–ó–ê–ü–£–°–ö –ë–û–¢–ê</b>

üóëÔ∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ:
‚Ä¢ –í—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –í—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚Ä¢ –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏
‚Ä¢ –í—Å–µ –æ—Ç–∑—ã–≤—ã
‚Ä¢ –í—Å—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É

üîÑ –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –±–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω

‚ùå <b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û!</b>

ü§î –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?
            """
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data='confirm_clear_db')],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='admin_panel')]
            ]
            
            await query.edit_message_text(
                confirmation_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –ë–î: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                reply_markup=keyboards.admin_menu()
            )
    
    async def clear_database(self, query):
        """–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
            tables_to_clear = [
                'users', 'analytics', 'payments', 'reviews', 
                'training_feedback', 'analysis_requests', 'daily_stats', 'scheduled_jobs'
            ]
            
            cleared_count = 0
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            import sqlite3
            from config import DATABASE_PATH
            
            with sqlite3.connect(DATABASE_PATH) as conn:
                cursor = conn.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
                existing_tables = [row[0] for row in cursor.fetchall()]
                
                for table in tables_to_clear:
                    if table in existing_tables:
                        try:
                            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                            cursor.execute(f"DELETE FROM {table}")
                            cleared_count += 1
                            logger.info(f"–û—á–∏—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: {table}")
                            
                        except Exception as table_error:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {table}: {table_error}")
                    else:
                        logger.info(f"–¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                conn.commit()
            
            success_text = f"""
‚úÖ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!</b>

üóëÔ∏è –û—á–∏—â–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {cleared_count}
üìä –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã

üîÑ <b>–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...</b>

‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.
            """
            
            await query.edit_message_text(
                success_text,
                reply_markup=keyboards.admin_menu(),
                parse_mode=ParseMode.HTML
            )
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await self.restart_bot()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=keyboards.admin_menu()
            )
    
    async def restart_bot(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
            import psutil
            current_process = psutil.Process()
            
            # –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã Python —Å main.py
            python_processes = []
            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                try:
                    if proc.info['cmdline'] and 'main.py' in ' '.join(proc.info['cmdline']):
                        python_processes.append(proc)
                except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                    pass
            
            if python_processes:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(python_processes)} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞")
                
                # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞
                for proc in python_processes:
                    try:
                        logger.info(f"–ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å {proc.pid}")
                        proc.terminate()
                        proc.wait(timeout=5)
                    except (psutil.NoSuchProcess, psutil.TimeoutExpired):
                        try:
                            proc.kill()
                        except:
                            pass
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                await asyncio.sleep(3)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            manager_path = "bot_manager.py"
            if os.path.exists(manager_path):
                logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä...")
                subprocess.Popen([
                    sys.executable, manager_path
                ], cwd=os.getcwd())
            else:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
                logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é...")
                subprocess.Popen([
                    sys.executable, "main.py"
                ], cwd=os.getcwd())
            
            logger.info("–ù–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω")
            
            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–æ–≤–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
            await asyncio.sleep(2)
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
            logger.info("–ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞")
            os._exit(0)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            os._exit(1)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
admin_panel = AdminPanel()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å callbacks.py
async def handle_admin_actions(update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    await admin_panel.handle_admin_actions(update, context, callback_data)
