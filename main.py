"""
üöÄ –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞ DianaLisa
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
"""

import asyncio
import logging
import nest_asyncio
import psutil
import signal
import os
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    PreCheckoutQueryHandler, filters, ContextTypes
)

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π
from config import BOT_TOKEN, ADMIN_IDS
from logger import setup_logging, get_logger, log_user_action, log_error
from enhanced_logger import main_logger
from database import db
from keyboards import keyboards
from callbacks import callback_handlers
from registration import registration_handler
from training import training_system
from payment import payment_system
from admin import admin_panel
from info import info_system
from utils import utils
# from validation import error_handler  # –ú–æ–¥—É–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ httpx (HTTP –∑–∞–ø—Ä–æ—Å—ã)
logging.getLogger("httpx").setLevel(logging.CRITICAL)
logging.getLogger("httpx").disabled = True

logger = get_logger(__name__)

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Windows
nest_asyncio.apply()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
application = None

class DianaLisaBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ DianaLisa"""
    
    def __init__(self):
        self.application = None
        self.bot_token = BOT_TOKEN
        self.admin_ids = ADMIN_IDS
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user_id = update.effective_user.id
            user_data = update.effective_user
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            log_user_action(user_id, 'start_command')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
            referral_code = None
            if context.args:
                referral_code = context.args[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_user = db.get_user(user_id)
            if existing_user:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
                is_admin = user_id in self.admin_ids
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                welcome_text = f"""
üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!</b>

üëã –ü—Ä–∏–≤–µ—Ç, {existing_user['first_name']}!

üí™ –†–∞–¥–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π —Å–≤–æ–π –ø—É—Ç—å –∫ –∑–¥–æ—Ä–æ–≤–æ–º—É –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏!

üéØ –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: –î–µ–Ω—å {existing_user.get('current_day', 1)}/3
üíé –°—Ç–∞—Ç—É—Å: {'–ü—Ä–µ–º–∏—É–º' if existing_user.get('is_premium', False) else '–ë–∞–∑–æ–≤—ã–π'}

üèãÔ∏è‚Äç‚ôÄÔ∏è –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:
                """
                
                # –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                menu_keyboard = keyboards.admin_main_menu() if is_admin else keyboards.main_menu()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
                from utils import send_image_with_text
                await send_image_with_text(
                    bot=context.bot,
                    chat_id=user_id,
                    image_path="DianaLisa1.jpg",
                    text=welcome_text,
                    reply_markup=menu_keyboard,
                    parse_mode=ParseMode.HTML
                )
                return  # –í–∞–∂–Ω–æ! –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                from registration import registration_handler
                await registration_handler.send_welcome_message(update, context)
            
        except Exception as e:
            log_error(e, 'start_command')
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=keyboards.back_to_main()
            )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        try:
            user_id = update.effective_user.id
            log_user_action(user_id, 'help_command')
            
            help_text = """
üÜò –ü–û–ú–û–©–¨

üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/menu - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/support - –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π

üèãÔ∏è‚Äç‚ôÄÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:
1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start
2. –í—ã–±–µ—Ä–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
3. –ù–∞—á–∏–Ω–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
4. –û—Ç–º–µ—á–∞–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫

‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É FAQ –≤ –º–µ–Ω—é!
            """
            
            await update.message.reply_text(
                help_text,
                reply_markup=keyboards.back_to_main()
            )
            
        except Exception as e:
            log_error(e, 'help_command')
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–∫–∏.",
                reply_markup=keyboards.back_to_main()
            )
    
    async def menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /menu"""
        try:
            user_id = update.effective_user.id
            log_user_action(user_id, 'menu_command')
            
            user = db.get_user(user_id)
            if not user:
                await update.message.reply_text(
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
                    reply_markup=keyboards.back_to_main()
                )
                return
            
            await update.message.reply_text(
                f"üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, {user['first_name']}!",
                reply_markup=keyboards.main_menu()
            )
            
        except Exception as e:
            log_error(e, 'menu_command')
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é.",
                reply_markup=keyboards.back_to_main()
            )
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats"""
        try:
            user_id = update.effective_user.id
            log_user_action(user_id, 'stats_command')
            
            user = db.get_user(user_id)
            if not user:
                await update.message.reply_text(
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
                    reply_markup=keyboards.back_to_main()
                )
                return
            
            stats = db.get_user_stats(user_id)
            training_progress = training_system.get_training_progress(user_id)
            
            stats_text = f"""
üìä –¢–í–û–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê

üëã –ò–º—è: {user['first_name']}
üìÖ –î–µ–Ω—å –∫—É—Ä—Å–∞: {user['current_day']}
üíé –°—Ç–∞—Ç—É—Å: {'–ü—Ä–µ–º–∏—É–º' if user['is_premium'] else '–ë–∞–∑–æ–≤—ã–π'}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user['registration_date'][:10]}

üèãÔ∏è‚Äç‚ôÄÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {training_progress.get('total_trainings', 0)}
‚Ä¢ –î–Ω–µ–π –ø—Ä–æ–π–¥–µ–Ω–æ: {training_progress.get('days_completed', 0)}
‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: {training_progress.get('progress_percentage', 0):.1f}%

üí∞ –ü–ª–∞—Ç–µ–∂–∏:
‚Ä¢ –í—Å–µ–≥–æ: {stats.get('payments_count', 0)}
‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {stats.get('total_spent', 0):.2f} ‚ÇΩ

üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:
‚Ä¢ –ö–Ω–æ–ø–æ–∫ –Ω–∞–∂–∞—Ç–æ: {stats.get('events', {}).get('button_click', 0)}
‚Ä¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {stats.get('events', {}).get('training_completed', 0)}
            """
            
            await update.message.reply_text(
                stats_text,
                reply_markup=keyboards.back_to_main()
            )
            
        except Exception as e:
            log_error(e, 'stats_command')
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
                reply_markup=keyboards.back_to_main()
            )
    
    async def support_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /support"""
        try:
            user_id = update.effective_user.id
            log_user_action(user_id, 'support_command')
            
            await info_system.show_support_info(update.message)
            
        except Exception as e:
            log_error(e, 'support_command')
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.",
                reply_markup=keyboards.back_to_main()
            )
    
    async def admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin"""
        try:
            user_id = update.effective_user.id
            
            if not admin_panel.is_admin(user_id):
                await update.message.reply_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
                    reply_markup=keyboards.back_to_main()
                )
                return
            
            log_user_action(user_id, 'admin_command')
            
            await update.message.reply_text(
                "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å DianaLisa",
                reply_markup=keyboards.admin_menu()
            )
            
        except Exception as e:
            log_error(e, 'admin_command')
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
                reply_markup=keyboards.back_to_main()
            )
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user_id = update.effective_user.id
            message_text = update.message.text
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            log_user_action(user_id, 'text_message', message_text[:100])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –±–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
            if context.user_data.get('waiting_for_broadcast'):
                await admin_panel.process_broadcast_message(update, context)
                context.user_data['waiting_for_broadcast'] = False
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –±–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if context.user_data.get('waiting_for_user_message'):
                target_user_id = context.user_data['waiting_for_user_message']
                await admin_panel.process_user_message(update, context, target_user_id)
                context.user_data['waiting_for_user_message'] = None
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –±–æ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
            feedback_key = f'waiting_feedback_{user_id}'
            if context.user_data.get(feedback_key):
                day = context.user_data[feedback_key]
                await self.process_training_feedback(update, context, user_id, day, message_text)
                context.user_data[feedback_key] = None
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            if await registration_handler.handle_registration_message(update, context):
                return
            
            # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await update.message.reply_text(
                "üëã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
                reply_markup=keyboards.main_menu()
            )
            
        except Exception as e:
            log_error(e, 'handle_text_message')
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                reply_markup=keyboards.back_to_main()
            )
    
    async def process_training_feedback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, day: int, feedback_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ"""
        try:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –≤ —Ñ–∞–π–ª
            from callbacks import CallbackHandlers
            callback_handler = CallbackHandlers()
            callback_handler.log_feedback(user_id, day, "dislike", feedback_text)
            
            # –°—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –ø—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            user = db.get_user(user_id)
            current_day = user.get('current_day', 1)
            if current_day < 3:
                new_day = current_day + 1
                db.update_user(user_id, current_day=new_day)
                main_logger.log_user_action(user_id, 'day_progress_immediate', {'from_day': current_day, 'to_day': new_day, 'reason': 'dislike'})
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            next_day_text = f"–î–µ–Ω—å {current_day + 1}" if current_day < 3 else "–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫—É—Ä—Å–∞"
            await update.message.reply_text(
                f"üìù –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–∑—ã–≤ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –î–µ–Ω—å {day}!\n\n"
                "–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n\n"
                f"üéØ –°–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ({next_day_text}) —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—ë - –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ! üí™",
                reply_markup=keyboards.main_menu(),
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            log_error(e, 'process_training_feedback')
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∑—ã–≤–∞.",
                reply_markup=keyboards.main_menu()
            )
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫"""
        try:
            await callback_handlers.process_callback(update, context)
        except Exception as e:
            log_error(e, 'handle_callback_query')
            await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    
    async def handle_pre_checkout(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            await payment_system.handle_pre_checkout(update, context)
        except Exception as e:
            log_error(e, 'handle_pre_checkout')
            await update.pre_checkout_query.answer(
                ok=False,
                error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞"
            )
    
    async def handle_successful_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            await payment_system.handle_successful_payment(update, context)
        except Exception as e:
            log_error(e, 'handle_successful_payment')
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=keyboards.back_to_main()
            )
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        try:
            # –ö–æ–º–∞–Ω–¥—ã
            self.application.add_handler(CommandHandler("start", self.start_command))
            self.application.add_handler(CommandHandler("help", self.help_command))
            self.application.add_handler(CommandHandler("menu", self.menu_command))
            self.application.add_handler(CommandHandler("stats", self.stats_command))
            self.application.add_handler(CommandHandler("support", self.support_command))
            self.application.add_handler(CommandHandler("admin", self.admin_command))
            
            # Callback-–∏
            self.application.add_handler(CallbackQueryHandler(self.handle_callback_query))
            
            # –ü–ª–∞—Ç–µ–∂–∏
            self.application.add_handler(PreCheckoutQueryHandler(self.handle_pre_checkout))
            self.application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, self.handle_successful_payment))
            
            # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message))
            
            logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            log_error(e, 'setup_handlers')
            raise
    
    async def startup(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db.init_database()
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
            from jobs import scheduler
            scheduler.start_all_scheduled_jobs()
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
            logger.info("–ë–æ—Ç DianaLisa –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            log_error(e, 'startup')
            raise
    
    async def shutdown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            from jobs import scheduler
            scheduler.shutdown()
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            # (SQLite –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
            
            logger.info("–ë–æ—Ç DianaLisa –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            log_error(e, 'shutdown')
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç
            if self.application is not None:
                logger.warning("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
                return
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.application = Application.builder().token(self.bot_token).build()
            application = self.application  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.setup_handlers()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            self.application.add_handler(CommandHandler("startup", self.startup))
            self.application.add_handler(CommandHandler("shutdown", self.shutdown))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ DianaLisa...")
            self.application.run_polling(
                allowed_updates=Update.ALL_TYPES,
                drop_pending_updates=True,
                close_loop=False  # –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º event loop –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
            )
            
        except Exception as e:
            log_error(e, 'run')
            logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")
            # –ù–µ –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –∫—Ä–∞—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å

def check_and_kill_conflicting_processes():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞"""
    try:
        current_pid = os.getpid()
        killed_count = 0
        
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã Python —Å main.py
                if (proc.info['name'] == 'python.exe' and 
                    proc.info['cmdline'] and 
                    'main.py' in ' '.join(proc.info['cmdline']) and
                    proc.info['pid'] != current_pid):
                    
                    logger.info(f"–ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å: PID {proc.info['pid']}")
                    proc.kill()
                    killed_count += 1
                    logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å {proc.info['pid']} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                continue
        
        if killed_count > 0:
            logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {killed_count} –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
            # –î–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
            import time
            time.sleep(2)
        else:
            logger.info("–ö–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")

def setup_signal_handlers():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    def signal_handler(signum, frame):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        setup_signal_handlers()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        check_and_kill_conflicting_processes()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        if not BOT_TOKEN or BOT_TOKEN == 'YOUR_BOT_TOKEN_HERE':
            logger.critical("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –≤ config.py")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot = DianaLisaBot()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
        max_retries = 3
        retry_count = 0
        
        while retry_count < max_retries:
            try:
                bot.run()
                break
            except Exception as e:
                if "Conflict" in str(e) and "getUpdates" in str(e):
                    retry_count += 1
                    logger.warning(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å –¥—Ä—É–≥–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞. –ü–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries}")
                    if retry_count < max_retries:
                        import time
                        time.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                        continue
                else:
                    raise
        
        if retry_count >= max_retries:
            logger.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
        
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        log_error(e, 'main')
        logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")

if __name__ == '__main__':
    main()
