"""
üõ† –£—Ç–∏–ª–∏—Ç—ã –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞ DianaLisa
–í–∞–ª–∏–¥–∞—Ü–∏—è, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ä–∞–±–æ—Ç–∞ —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏ –∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
"""

import re
import logging
import pytz
import os
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Any
import hashlib
import random
import string
from telegram import InputFile
from telegram.constants import ParseMode

logger = logging.getLogger(__name__)

class Utils:
    """–ö–ª–∞—Å—Å —Å —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    
    @staticmethod
    def validate_email(email: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è email –∞–¥—Ä–µ—Å–∞"""
        try:
            pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
            return re.match(pattern, email) is not None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email: {e}")
            return False
    
    @staticmethod
    def validate_phone(phone: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        try:
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
            clean_phone = re.sub(r'[^\d+]', '', phone)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞
            if clean_phone.startswith('+7') and len(clean_phone) == 12:
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ +7
            if clean_phone.startswith('8') and len(clean_phone) == 11:
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å 7
            if clean_phone.startswith('7') and len(clean_phone) == 11:
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
            return False
    
    @staticmethod
    def format_phone(phone: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        try:
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
            clean_phone = re.sub(r'[^\d]', '', phone)
            
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É +7XXXXXXXXXX
            if clean_phone.startswith('8'):
                clean_phone = '7' + clean_phone[1:]
            elif not clean_phone.startswith('7'):
                clean_phone = '7' + clean_phone
            
            return '+' + clean_phone
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
            return phone
    
    @staticmethod
    def get_user_timezone(user_id: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            from database import db
            user = db.get_user(user_id)
            return user['timezone'] if user else 'Europe/Moscow'
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}")
            return 'Europe/Moscow'
    
    @staticmethod
    def format_datetime(dt: datetime, timezone_str: str = 'Europe/Moscow') -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            tz = pytz.timezone(timezone_str)
            local_dt = dt.astimezone(tz)
            return local_dt.strftime('%d.%m.%Y %H:%M')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã: {e}")
            return dt.strftime('%d.%m.%Y %H:%M')
    
    @staticmethod
    def get_timezone_offset(timezone_str: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–º–µ—â–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –≤ —á–∞—Å–∞—Ö"""
        try:
            tz = pytz.timezone(timezone_str)
            now = datetime.now(tz)
            return now.utcoffset().total_seconds() / 3600
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–º–µ—â–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}")
            return 3  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é UTC+3 (–ú–æ—Å–∫–≤–∞)
    
    @staticmethod
    def generate_referral_code(user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ user_id –∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            random_part = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
            return f"REF{user_id}{random_part}"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞: {e}")
            return f"REF{user_id}"
    
    @staticmethod
    def hash_password(password: str) -> str:
        """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
        try:
            return hashlib.sha256(password.encode()).hexdigest()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è: {e}")
            return password
    
    @staticmethod
    def generate_random_string(length: int = 8) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        try:
            return ''.join(random.choices(string.ascii_letters + string.digits, k=length))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: {e}")
            return "random"
    
    @staticmethod
    def format_currency(amount: float, currency: str = 'RUB') -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã"""
        try:
            if currency == 'RUB':
                return f"{amount:.2f} ‚ÇΩ"
            elif currency == 'USD':
                return f"${amount:.2f}"
            elif currency == 'EUR':
                return f"‚Ç¨{amount:.2f}"
            else:
                return f"{amount:.2f} {currency}"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã: {e}")
            return f"{amount} {currency}"
    
    @staticmethod
    def format_percentage(value: float, total: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤"""
        try:
            if total == 0:
                return "0%"
            percentage = (value / total) * 100
            return f"{percentage:.1f}%"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤: {e}")
            return "0%"
    
    @staticmethod
    def truncate_text(text: str, max_length: int = 100) -> str:
        """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
        try:
            if len(text) <= max_length:
                return text
            return text[:max_length-3] + "..."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            return text
    
    @staticmethod
    def clean_text(text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        try:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
            cleaned = re.sub(r'\s+', ' ', text.strip())
            return cleaned
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            return text
    
    @staticmethod
    def extract_mentions(text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            pattern = r'@(\w+)'
            return re.findall(pattern, text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            return []
    
    @staticmethod
    def extract_hashtags(text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö–µ—à—Ç–µ–≥–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            pattern = r'#(\w+)'
            return re.findall(pattern, text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ö–µ—à—Ç–µ–≥–æ–≤: {e}")
            return []
    
    @staticmethod
    def is_valid_url(url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL"""
        try:
            pattern = r'^https?://(?:[-\w.])+(?:\:[0-9]+)?(?:/(?:[\w/_.])*(?:\?(?:[\w&=%.])*)?(?:\#(?:[\w.])*)?)?$'
            return re.match(pattern, url) is not None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ URL: {e}")
            return False
    
    @staticmethod
    def get_file_extension(filename: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
        try:
            return filename.split('.')[-1].lower() if '.' in filename else ''
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return ''
    
    @staticmethod
    def format_file_size(size_bytes: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
        try:
            if size_bytes == 0:
                return "0 B"
            
            size_names = ["B", "KB", "MB", "GB", "TB"]
            i = 0
            while size_bytes >= 1024 and i < len(size_names) - 1:
                size_bytes /= 1024.0
                i += 1
            
            return f"{size_bytes:.1f} {size_names[i]}"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞: {e}")
            return f"{size_bytes} B"
    
    @staticmethod
    def calculate_age(birth_date: datetime) -> int:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
        try:
            today = datetime.now()
            age = today.year - birth_date.year
            if today.month < birth_date.month or (today.month == birth_date.month and today.day < birth_date.day):
                age -= 1
            return age
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞: {e}")
            return 0
    
    @staticmethod
    def get_days_until_date(target_date: datetime) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –¥–æ –¥–∞—Ç—ã"""
        try:
            today = datetime.now().date()
            target = target_date.date()
            return (target - today).days
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–Ω–µ–π –¥–æ –¥–∞—Ç—ã: {e}")
            return 0
    
    @staticmethod
    def is_weekend(date: datetime = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ –≤—ã—Ö–æ–¥–Ω—ã–º –¥–Ω–µ–º"""
        try:
            if date is None:
                date = datetime.now()
            return date.weekday() >= 5  # 5 = —Å—É–±–±–æ—Ç–∞, 6 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è: {e}")
            return False
    
    @staticmethod
    def get_season(date: datetime = None) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞ –≥–æ–¥–∞"""
        try:
            if date is None:
                date = datetime.now()
            
            month = date.month
            if month in [12, 1, 2]:
                return "–∑–∏–º–∞"
            elif month in [3, 4, 5]:
                return "–≤–µ—Å–Ω–∞"
            elif month in [6, 7, 8]:
                return "–ª–µ—Ç–æ"
            else:
                return "–æ—Å–µ–Ω—å"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞: {e}")
            return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    @staticmethod
    def format_duration(seconds: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60
            seconds = seconds % 60
            
            if hours > 0:
                return f"{hours}—á {minutes}–º {seconds}—Å"
            elif minutes > 0:
                return f"{minutes}–º {seconds}—Å"
            else:
                return f"{seconds}—Å"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return f"{seconds}—Å"
    
    @staticmethod
    def get_random_motivation() -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–π —Ñ—Ä–∞–∑—ã"""
        try:
            motivations = [
                "üí™ –¢—ã –º–æ–∂–µ—à—å —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å!",
                "üåü –ö–∞–∂–¥—ã–π –¥–µ–Ω—å - –Ω–æ–≤—ã–π —à–∞–Ω—Å!",
                "üî• –í–µ—Ä—å –≤ —Å–µ–±—è!",
                "‚ú® –¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å!",
                "üéØ –ò–¥–∏ –∫ —Å–≤–æ–µ–π —Ü–µ–ª–∏!",
                "üíé –¢—ã —É–Ω–∏–∫–∞–ª—å–Ω–∞!",
                "üöÄ –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è!",
                "üåà –ü–æ—Å–ª–µ –¥–æ–∂–¥—è –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—É–≥–∞!",
                "‚≠ê –¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å –ª—É—á—à–µ–≥–æ!",
                "üéâ –ü—Ä–∞–∑–¥–Ω—É–π –∫–∞–∂–¥—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π —É—Å–ø–µ—Ö!"
            ]
            return random.choice(motivations)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏: {e}")
            return "üí™ –¢—ã –º–æ–∂–µ—à—å —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å!"
    
    @staticmethod
    def get_time_greeting() -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            hour = datetime.now().hour
            
            if 5 <= hour < 12:
                return "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!"
            elif 12 <= hour < 17:
                return "‚òÄÔ∏è –î–æ–±—Ä—ã–π –¥–µ–Ω—å!"
            elif 17 <= hour < 22:
                return "üåÜ –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!"
            else:
                return "üåô –î–æ–±—Ä–æ–π –Ω–æ—á–∏!"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
            return "üëã –ü—Ä–∏–≤–µ—Ç!"
    
    @staticmethod
    def validate_timezone(timezone_str: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
        try:
            pytz.timezone(timezone_str)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}")
            return False
    
    @staticmethod
    def get_common_timezones() -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤"""
        return [
            {'name': 'üá∑üá∫ –ú–æ—Å–∫–≤–∞', 'value': 'Europe/Moscow'},
            {'name': 'üá∫üá¶ –ö–∏–µ–≤', 'value': 'Europe/Kiev'},
            {'name': 'üáßüáæ –ú–∏–Ω—Å–∫', 'value': 'Europe/Minsk'},
            {'name': 'üá∞üáø –ê–ª–º–∞—Ç—ã', 'value': 'Asia/Almaty'},
            {'name': 'üá∫üá∏ –ù—å—é-–ô–æ—Ä–∫', 'value': 'America/New_York'},
            {'name': 'üá¨üáß –õ–æ–Ω–¥–æ–Ω', 'value': 'Europe/London'},
            {'name': 'üá©üá™ –ë–µ—Ä–ª–∏–Ω', 'value': 'Europe/Berlin'},
            {'name': 'üá´üá∑ –ü–∞—Ä–∏–∂', 'value': 'Europe/Paris'},
            {'name': 'üáØüáµ –¢–æ–∫–∏–æ', 'value': 'Asia/Tokyo'},
            {'name': 'üá¶üá∫ –°–∏–¥–Ω–µ–π', 'value': 'Australia/Sydney'}
        ]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —É—Ç–∏–ª–∏—Ç
utils = Utils()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def validate_email(email: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è email –∞–¥—Ä–µ—Å–∞"""
    return utils.validate_email(email)

def validate_name(name: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ - —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ —Ü–∏—Ñ—Ä"""
    if not name or len(name.strip()) < 2:
        return False
    
    import re
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã
    # –ò—Å–∫–ª—é—á–∞–µ–º —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    return bool(re.match(r'^[–∞-—è—ë–ê-–Ø–Åa-zA-Z\s\-\']+$', name.strip()))

def validate_phone(phone: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã"""
    if not phone or len(phone.strip()) < 10:
        return False
    
    import re
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    clean_phone = phone.replace(' ', '').replace('-', '').replace('(', '').replace(')', '')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ –æ–¥–∏–Ω –ø–ª—é—Å –≤ –Ω–∞—á–∞–ª–µ
    if not re.match(r'^\+?[0-9]+$', clean_phone):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (–æ—Ç 10 –¥–æ 15 —Ü–∏—Ñ—Ä)
    digits_only = re.sub(r'[^\d]', '', phone)
    if len(digits_only) < 10 or len(digits_only) > 15:
        return False
    
    return True

def get_user_timezone(user_id: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return utils.get_user_timezone(user_id)

def send_motivational_message(user_id: int, message: str = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if message is None:
        message = utils.get_random_motivation()
    return message

# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
import os
from telegram import InputFile
from telegram.constants import ParseMode
import logging

logger = logging.getLogger(__name__)

def get_progress_bar(current: int, total: int, length: int = 10) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
    if total == 0:
        return "‚ñë" * length
    
    filled = int((current / total) * length)
    empty = length - filled
    
    return "‚ñà" * filled + "‚ñë" * empty

def get_progress_percentage(current: int, total: int) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    if total == 0:
        return 0
    return int((current / total) * 100)

def format_progress_text(current: int, total: int, item_name: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
    percentage = get_progress_percentage(current, total)
    progress_bar = get_progress_bar(current, total)
    
    return f"""
üìä <b>{item_name}</b>
{progress_bar} {percentage}%
({current}/{total})
    """

def split_long_text(text: str, max_length: int = 1000) -> tuple[str, str]:
    """
    –†–∞–∑–¥–µ–ª—è–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏ –¥–ª—è caption –∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    –î–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å—Ç–∞—Ä–∞–µ—Ç—Å—è –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–º–∏–Ω–∫—É –∏ —Å–æ–≤–µ—Ç—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏
    """
    if len(text) <= max_length:
        return text, ""
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    if "üèãÔ∏è‚Äç‚ôÄÔ∏è –î–ï–ù–¨" in text and "üí° –°–æ–≤–µ—Ç—ã:" in text:
        # –ò—â–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        parts = text.split('\n\n')
        caption_text = ""
        message_text = ""
        
        # –°–æ–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å –¥–æ –∑–∞–º–∏–Ω–∫–∏
        for part in parts:
            if "üßò‚Äç‚ôÄÔ∏è –ó–∞–º–∏–Ω–∫–∞" in part or "üí° –°–æ–≤–µ—Ç—ã:" in part:
                # –ó–∞–º–∏–Ω–∫—É –∏ —Å–æ–≤–µ—Ç—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏
                if len(caption_text + part + '\n\n') <= max_length:
                    caption_text += part + '\n\n'
                else:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message_text += part + '\n\n'
            else:
                if len(caption_text + part + '\n\n') <= max_length:
                    caption_text += part + '\n\n'
                else:
                    message_text += part + '\n\n'
        
        return caption_text.strip(), message_text.strip()
    
    # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤
    paragraphs = text.split('\n\n')
    caption_text = ""
    message_text = ""
    
    for paragraph in paragraphs:
        if len(caption_text + paragraph + '\n\n') <= max_length:
            caption_text += paragraph + '\n\n'
        else:
            message_text += paragraph + '\n\n'
    
    return caption_text.strip(), message_text.strip()

async def send_image_with_text(bot, chat_id: int, image_path: str, text: str, 
                             reply_markup=None, parse_mode: str = ParseMode.HTML):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º"""
    try:
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        caption_text, message_text = split_long_text(text)
        
        if not os.path.exists(image_path):
            logger.warning(f"–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
            return
        
        logger.info(f"–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(image_path)} –±–∞–π—Ç")
        
        with open(image_path, 'rb') as photo:
            await bot.send_photo(
                chat_id=chat_id,
                photo=InputFile(photo),
                caption=caption_text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
            logger.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
            # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            # –í—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ caption –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if message_text:
                logger.info("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (—É–±—Ä–∞–Ω–æ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )

def get_motivational_emoji(progress_percentage: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    if progress_percentage >= 100:
        return "üèÜ"
    elif progress_percentage >= 80:
        return "üî•"
    elif progress_percentage >= 60:
        return "üí™"
    elif progress_percentage >= 40:
        return "‚ö°"
    elif progress_percentage >= 20:
        return "üåü"
    else:
        return "üöÄ"

def format_course_progress_bar(current_day: int, total_days: int = 3) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é —à–∫–∞–ª—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫—É—Ä—Å–∞"""
    progress_percentage = (current_day / total_days) * 100
    
    # –°–æ–∑–¥–∞–µ–º —à–∫–∞–ª—É –∏–∑ —ç–º–æ–¥–∑–∏
    filled_blocks = int(progress_percentage / 20)  # 5 –±–ª–æ–∫–æ–≤ –ø–æ 20%
    empty_blocks = 5 - filled_blocks
    
    progress_bar = "üü©" * filled_blocks + "‚¨ú" * empty_blocks
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π —ç–º–æ–¥–∑–∏
    emoji = get_motivational_emoji(int(progress_percentage))
    
    return f"{emoji} –ü—Ä–æ–≥—Ä–µ—Å—Å –∫—É—Ä—Å–∞: {progress_bar} {current_day}/{total_days}"

def get_user_status_text(user: dict) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user.get('is_premium', False):
        return "üíé –ü—Ä–µ–º–∏—É–º —É—á–∞—Å—Ç–Ω–∏–∫"
    else:
        current_day = user.get('current_day', 1)
        if current_day <= 3:
            return f"üéØ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–î–µ–Ω—å {current_day}/3)"
        else:
            return "üìö –ó–∞–≤–µ—Ä—à–∏–ª –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å"

def format_course_progress(current_day: int, total_days: int = 3) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫—É—Ä—Å–∞"""
    percentage = get_progress_percentage(current_day, total_days)
    emoji = get_motivational_emoji(percentage)
    progress_bar = get_progress_bar(current_day, total_days)
    
    return f"""
{emoji} <b>–ü—Ä–æ–≥—Ä–µ—Å—Å –∫—É—Ä—Å–∞</b>

{progress_bar} {percentage}%
–î–µ–Ω—å {current_day} –∏–∑ {total_days}
    """

def format_collected_tips_message(collected_tips: list, completed_count: int, total_count: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏"""
    if not collected_tips:
        return "üí° –°–æ–≤–µ—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ –º–µ—Ä–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if completed_count == total_count:
        emoji = "üèÜ"
        title = "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ —Å–æ–≤–µ—Ç—ã —Å–æ–±—Ä–∞–Ω—ã!"
    elif completed_count >= total_count * 0.75:
        emoji = "üî•"
        title = "–û—Ç–ª–∏—á–Ω–æ! –ü–æ—á—Ç–∏ –≤—Å–µ —Å–æ–≤–µ—Ç—ã —Å–æ–±—Ä–∞–Ω—ã!"
    elif completed_count >= total_count * 0.5:
        emoji = "üí™"
        title = "–•–æ—Ä–æ—à–æ! –ü–æ–ª–æ–≤–∏–Ω–∞ —Å–æ–≤–µ—Ç–æ–≤ —Å–æ–±—Ä–∞–Ω–∞!"
    else:
        emoji = "üåü"
        title = "–ù–∞—á–∞–ª–æ –ø–æ–ª–æ–∂–µ–Ω–æ! –°–æ–≤–µ—Ç—ã —Å–æ–±–∏—Ä–∞—é—Ç—Å—è!"
    
    message = f"""
{emoji} <b>{title}</b>

üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {completed_count}/{total_count} —Å–æ–≤–µ—Ç–æ–≤ —Å–æ–±—Ä–∞–Ω–æ

üí° <b>–í–∞—à–∏ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:</b>
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç—ã —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —ç–º–æ–¥–∑–∏
    tip_emojis = {
        'training': 'üèãÔ∏è‚Äç‚ôÄÔ∏è'
    }
    
    for tip in collected_tips:
        tip_emoji = tip_emojis.get(tip['type'], 'üí°')
        message += f"\n{tip_emoji} {tip['text']}"
    
    if completed_count < total_count:
        remaining = total_count - completed_count
        message += f"\n\nüéØ –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å {remaining} —Å–æ–≤–µ—Ç(–æ–≤)!"
    
    return message

def get_tip_type_from_action(action: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ–≤–µ—Ç–∞ –∏–∑ –¥–µ–π—Å—Ç–≤–∏—è"""
    tip_mapping = {
        'mark_training': 'training'
    }
    return tip_mapping.get(action, 'general')
