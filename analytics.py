"""
üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –±–æ—Ç–∞ DianaLisa
–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –º–µ—Ç—Ä–∏–∫
"""

import logging
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Any
import sqlite3
from database import db

logger = logging.getLogger(__name__)

class AdvancedAnalytics:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    
    def __init__(self, database=None):
        self.db = database or db
    
    def get_user_engagement_metrics(self, user_id: int, days: int = 30) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            cutoff_date = datetime.now() - timedelta(days=days)
            
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                
                # –û–±—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                cursor.execute('''
                    SELECT COUNT(*) as total_events
                    FROM analytics 
                    WHERE user_id = ? AND timestamp > ?
                ''', (user_id, cutoff_date))
                total_events = cursor.fetchone()[0]
                
                # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º
                cursor.execute('''
                    SELECT DATE(timestamp) as date, COUNT(*) as events
                    FROM analytics 
                    WHERE user_id = ? AND timestamp > ?
                    GROUP BY DATE(timestamp)
                    ORDER BY date DESC
                ''', (user_id, cutoff_date))
                daily_activity = cursor.fetchall()
                
                # –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
                cursor.execute('''
                    SELECT event_type, COUNT(*) as count
                    FROM analytics 
                    WHERE user_id = ? AND timestamp > ?
                    GROUP BY event_type
                    ORDER BY count DESC
                ''', (user_id, cutoff_date))
                event_types = cursor.fetchall()
                
                # –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—á–∞—Å—ã –¥–Ω—è)
                cursor.execute('''
                    SELECT strftime('%H', timestamp) as hour, COUNT(*) as count
                    FROM analytics 
                    WHERE user_id = ? AND timestamp > ?
                    GROUP BY strftime('%H', timestamp)
                    ORDER BY count DESC
                ''', (user_id, cutoff_date))
                hourly_activity = cursor.fetchall()
                
                # –°–µ—Å—Å–∏–∏ (–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ –¥–Ω—è–º)
                active_days = len(daily_activity)
                avg_events_per_day = total_events / max(active_days, 1)
                
                # –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Å
                most_active_hour = hourly_activity[0][0] if hourly_activity else None
                
                return {
                    'total_events': total_events,
                    'active_days': active_days,
                    'avg_events_per_day': round(avg_events_per_day, 2),
                    'daily_activity': daily_activity,
                    'event_types': dict(event_types),
                    'hourly_activity': dict(hourly_activity),
                    'most_active_hour': most_active_hour,
                    'engagement_score': self._calculate_engagement_score(total_events, active_days, days)
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏: {e}")
            return {}
    
    def _calculate_engagement_score(self, total_events: int, active_days: int, period_days: int) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (0-100)"""
        try:
            # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            activity_rate = active_days / period_days  # –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π
            events_per_day = total_events / max(active_days, 1)  # –°—Ä–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–π –≤ –¥–µ–Ω—å
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞)
            max_activity_rate = 1.0  # 100% –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π
            max_events_per_day = 20.0  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –º–∞–∫—Å–∏–º—É–º 20 —Å–æ–±—ã—Ç–∏–π –≤ –¥–µ–Ω—å
            
            # –†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏
            activity_score = min(activity_rate / max_activity_rate, 1.0) * 50
            events_score = min(events_per_day / max_events_per_day, 1.0) * 50
            
            engagement_score = activity_score + events_score
            return round(min(engagement_score, 100.0), 1)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –æ—Ü–µ–Ω–∫–∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏: {e}")
            return 0.0
    
    def get_training_analytics(self, user_id: int) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
                user = self.db.get_user(user_id)
                completed_trainings = user.get('training_count', 0) if user else 0
                
                # –í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                cursor.execute('''
                    SELECT strftime('%H', timestamp) as hour, COUNT(*) as count
                    FROM analytics 
                    WHERE user_id = ? AND event_type = 'training_completed'
                    GROUP BY strftime('%H', timestamp)
                    ORDER BY count DESC
                ''', (user_id,))
                training_times = cursor.fetchall()
                
                # –°–µ—Ä–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                cursor.execute('''
                    SELECT DATE(timestamp) as date
                    FROM analytics 
                    WHERE user_id = ? AND event_type = 'training_completed'
                    ORDER BY timestamp
                ''', (user_id,))
                training_dates = [row[0] for row in cursor.fetchall()]
                
                # –†–∞—Å—á–µ—Ç —Å–µ—Ä–∏–π
                streaks = self._calculate_training_streaks(training_dates)
                
                return {
                    'completed_trainings': completed_trainings,
                    'training_times': dict(training_times),
                    'current_streak': streaks.get('current', 0),
                    'longest_streak': streaks.get('longest', 0),
                    'total_streaks': streaks.get('total', 0)
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {e}")
            return {}
    
    def _calculate_training_streaks(self, training_dates: List[str]) -> Dict[str, int]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–µ—Ä–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
        try:
            if not training_dates:
                return {'current': 0, 'longest': 0, 'total': 0}
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
            dates = [datetime.strptime(date, '%Y-%m-%d').date() for date in training_dates]
            dates = sorted(set(dates))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
            
            if not dates:
                return {'current': 0, 'longest': 0, 'total': 0}
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–µ—Ä–∏–∏
            streaks = []
            current_streak = 1
            longest_streak = 1
            
            for i in range(1, len(dates)):
                diff = (dates[i] - dates[i-1]).days
                if diff == 1:  # –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
                    current_streak += 1
                    longest_streak = max(longest_streak, current_streak)
                elif diff > 1:  # –ü—Ä–æ–ø—É—Å–∫ –¥–Ω–µ–π
                    if current_streak > 1:
                        streaks.append(current_streak)
                    current_streak = 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ—Ä–∏—é
            if current_streak > 1:
                streaks.append(current_streak)
            
            # –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è (–µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –±—ã–ª–∞ –≤—á–µ—Ä–∞ –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è)
            today = datetime.now().date()
            yesterday = today - timedelta(days=1)
            current = 0
            
            if dates[-1] == today or dates[-1] == yesterday:
                current = current_streak
            
            return {
                'current': current,
                'longest': longest_streak,
                'total': len(streaks)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–µ—Ä–∏–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {e}")
            return {'current': 0, 'longest': 0, 'total': 0}
    
    def get_retention_analysis(self, days: int = 30) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            cutoff_date = datetime.now() - timedelta(days=days)
            
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                cursor.execute('SELECT COUNT(*) FROM users')
                total_users = cursor.fetchone()[0]
                
                # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
                cursor.execute('''
                    SELECT COUNT(DISTINCT user_id) 
                    FROM analytics 
                    WHERE timestamp > ?
                ''', (cutoff_date,))
                active_users = cursor.fetchone()[0]
                
                # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
                cursor.execute('''
                    SELECT COUNT(*) 
                    FROM users 
                    WHERE registration_date > ?
                ''', (cutoff_date,))
                new_users = cursor.fetchone()[0]
                
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
                cursor.execute('''
                    SELECT COUNT(DISTINCT user_id)
                    FROM analytics 
                    WHERE user_id IN (
                        SELECT user_id 
                        FROM analytics 
                        WHERE timestamp > ? AND timestamp <= ?
                        GROUP BY user_id 
                        HAVING COUNT(*) > 1
                    )
                ''', (cutoff_date - timedelta(days=7), cutoff_date))
                returning_users = cursor.fetchone()[0]
                
                # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
                retention_rate = (active_users / max(total_users, 1)) * 100
                new_user_rate = (new_users / max(total_users, 1)) * 100
                return_rate = (returning_users / max(active_users, 1)) * 100
                
                return {
                    'total_users': total_users,
                    'active_users': active_users,
                    'new_users': new_users,
                    'returning_users': returning_users,
                    'retention_rate': round(retention_rate, 2),
                    'new_user_rate': round(new_user_rate, 2),
                    'return_rate': round(return_rate, 2)
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è: {e}")
            return {}
    
    def get_feature_usage_analytics(self, days: int = 30) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π"""
        try:
            cutoff_date = datetime.now() - timedelta(days=days)
            
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                
                # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
                cursor.execute('''
                    SELECT event_type, COUNT(*) as count, COUNT(DISTINCT user_id) as unique_users
                    FROM analytics 
                    WHERE timestamp > ?
                    GROUP BY event_type
                    ORDER BY count DESC
                ''', (cutoff_date,))
                feature_usage = cursor.fetchall()
                
                # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                cursor.execute('''
                    SELECT event_data, COUNT(*) as count
                    FROM analytics 
                    WHERE event_type = 'button_click' AND timestamp > ?
                    GROUP BY event_data
                    ORDER BY count DESC
                    LIMIT 10
                ''', (cutoff_date,))
                popular_buttons = cursor.fetchall()
                
                # –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–∫—É–ø–∫–∏
                cursor.execute('''
                    SELECT COUNT(DISTINCT user_id) as users_with_purchases
                    FROM payments 
                    WHERE status = 'completed' AND created_at > ?
                ''', (cutoff_date,))
                users_with_purchases = cursor.fetchone()[0]
                
                cursor.execute('''
                    SELECT COUNT(DISTINCT user_id) as total_active_users
                    FROM analytics 
                    WHERE timestamp > ?
                ''', (cutoff_date,))
                total_active_users = cursor.fetchone()[0]
                
                conversion_rate = (users_with_purchases / max(total_active_users, 1)) * 100
                
                return {
                    'feature_usage': [
                        {
                            'feature': row[0],
                            'total_uses': row[1],
                            'unique_users': row[2]
                        } for row in feature_usage
                    ],
                    'popular_buttons': dict(popular_buttons),
                    'conversion_rate': round(conversion_rate, 2),
                    'users_with_purchases': users_with_purchases
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π: {e}")
            return {}
    
    def get_user_segments(self) -> Dict[str, Any]:
        """–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                
                # –°–µ–≥–º–µ–Ω—Ç—ã –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                cursor.execute('''
                    SELECT 
                        CASE 
                            WHEN activity_count >= 50 THEN 'high_activity'
                            WHEN activity_count >= 10 THEN 'medium_activity'
                            ELSE 'low_activity'
                        END as segment,
                        COUNT(*) as users
                    FROM (
                        SELECT user_id, COUNT(*) as activity_count
                        FROM analytics 
                        GROUP BY user_id
                    ) user_activity
                    GROUP BY segment
                ''')
                activity_segments = cursor.fetchall()
                
                # –°–µ–≥–º–µ–Ω—Ç—ã –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º
                cursor.execute('''
                    SELECT 
                        CASE 
                            WHEN training_count >= 10 THEN 'fitness_enthusiast'
                            WHEN training_count >= 3 THEN 'regular_trainer'
                            WHEN training_count >= 1 THEN 'beginner'
                            ELSE 'inactive'
                        END as segment,
                        COUNT(*) as users
                    FROM users
                    GROUP BY segment
                ''')
                training_segments = cursor.fetchall()
                
                # –°–µ–≥–º–µ–Ω—Ç—ã –ø–æ –ø–æ–∫—É–ø–∫–∞–º
                cursor.execute('''
                    SELECT 
                        CASE 
                            WHEN total_purchases >= 1000 THEN 'premium'
                            WHEN total_purchases >= 100 THEN 'paying'
                            WHEN total_purchases > 0 THEN 'trial'
                            ELSE 'free'
                        END as segment,
                        COUNT(*) as users
                    FROM users
                    GROUP BY segment
                ''')
                purchase_segments = cursor.fetchall()
                
                return {
                    'activity_segments': dict(activity_segments),
                    'training_segments': dict(training_segments),
                    'purchase_segments': dict(purchase_segments)
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return {}
    
    def get_trends_analysis(self, days: int = 30) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤"""
        try:
            cutoff_date = datetime.now() - timedelta(days=days)
            
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                
                # –¢—Ä–µ–Ω–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
                cursor.execute('''
                    SELECT DATE(registration_date) as date, COUNT(*) as registrations
                    FROM users 
                    WHERE registration_date > ?
                    GROUP BY DATE(registration_date)
                    ORDER BY date
                ''', (cutoff_date,))
                registration_trend = cursor.fetchall()
                
                # –¢—Ä–µ–Ω–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                cursor.execute('''
                    SELECT DATE(timestamp) as date, COUNT(*) as events
                    FROM analytics 
                    WHERE timestamp > ?
                    GROUP BY DATE(timestamp)
                    ORDER BY date
                ''', (cutoff_date,))
                activity_trend = cursor.fetchall()
                
                # –¢—Ä–µ–Ω–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                cursor.execute('''
                    SELECT DATE(timestamp) as date, COUNT(*) as trainings
                    FROM analytics 
                    WHERE event_type = 'training_completed' AND timestamp > ?
                    GROUP BY DATE(timestamp)
                    ORDER BY date
                ''', (cutoff_date,))
                training_trend = cursor.fetchall()
                
                return {
                    'registration_trend': dict(registration_trend),
                    'activity_trend': dict(activity_trend),
                    'training_trend': dict(training_trend)
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            return {}
    
    def generate_user_report(self, user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            user = self.db.get_user(user_id)
            if not user:
                return "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            engagement = self.get_user_engagement_metrics(user_id)
            training = self.get_training_analytics(user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = f"""
üìä <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

üë§ <b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –ò–º—è: {user.get('username', user.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))}
‚Ä¢ Email: {user.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.get('registration_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
‚Ä¢ –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å: {user.get('current_day', 1)}/3

üìà <b>–ú–µ—Ç—Ä–∏–∫–∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –û–±—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {engagement.get('total_events', 0)} —Å–æ–±—ã—Ç–∏–π
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π: {engagement.get('active_days', 0)} –∏–∑ 30
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–π –≤ –¥–µ–Ω—å: {engagement.get('avg_events_per_day', 0)}
‚Ä¢ –û—Ü–µ–Ω–∫–∞ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏: {engagement.get('engagement_score', 0)}/100
‚Ä¢ –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Å: {engagement.get('most_active_hour', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}:00

üèãÔ∏è‚Äç‚ôÄÔ∏è <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</b>
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {training.get('completed_trainings', 0)}
‚Ä¢ –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {training.get('current_streak', 0)} –¥–Ω–µ–π
‚Ä¢ –°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Å–µ—Ä–∏—è: {training.get('longest_streak', 0)} –¥–Ω–µ–π
‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Ä–∏–π: {training.get('total_streaks', 0)}

üéØ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
{self._generate_recommendations(engagement, training)}
            """
            
            return report.strip()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"
    
    def _generate_recommendations(self, engagement: Dict, training: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        recommendations = []
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
        if engagement.get('engagement_score', 0) < 30:
            recommendations.append("‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –±–æ—Ç–µ")
        elif engagement.get('engagement_score', 0) > 80:
            recommendations.append("‚Ä¢ –û—Ç–ª–∏—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º
        if training.get('current_streak', 0) == 0:
            recommendations.append("‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é —Å–µ—Ä–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
        elif training.get('current_streak', 0) >= 7:
            recommendations.append("‚Ä¢ –û—Ç–ª–∏—á–Ω–∞—è —Å–µ—Ä–∏—è! –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–π—Ç–µ –µ—ë")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        most_active_hour = engagement.get('most_active_hour')
        if most_active_hour:
            hour = int(most_active_hour)
            if 6 <= hour < 12:
                recommendations.append("‚Ä¢ –í—ã –∞–∫—Ç–∏–≤–Ω—ã —É—Ç—Ä–æ–º - –æ—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
            elif 20 <= hour <= 23:
                recommendations.append("‚Ä¢ –í–µ—á–µ—Ä–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç—Ä–µ–Ω–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
        
        if not recommendations:
            recommendations.append("‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞")
        
        return "\n".join(recommendations)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
advanced_analytics = AdvancedAnalytics()
